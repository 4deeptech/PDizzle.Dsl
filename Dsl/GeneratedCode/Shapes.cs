//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainClass PropertyShape
	/// Description for FourDeep.PDizzle.PropertyShape
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.PropertyShape.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.PropertyShape.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ac29cfb1-3c0f-46f8-b07c-ec7523920f20")]
	public partial class PropertyShape : DslDiagrams::NodeShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with PropertyShape.
		/// </summary>
		public static DslDiagrams::Decorator FindPropertyShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Width = 0.01F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LavenderBlush);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 8/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("PropertyShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8");			
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("OrderDecorator");
			field2.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("PropertyShapeOrderDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8");			
			shapeFields.Add(field2);
			
			DslDiagrams::TextField field3 = new DslDiagrams::TextField("TypeDecorator");
			field3.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("PropertyShapeTypeDecoratorDefaultText");
			field3.DefaultFocusable = true;
			field3.DefaultAutoSize = true;
			field3.AnchoringBehavior.MinimumHeightInLines = 1;
			field3.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field3.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field3);
			
			DslDiagrams::TextField field4 = new DslDiagrams::TextField("NamespaceDecorator");
			field4.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("PropertyShapeNamespaceDecoratorDefaultText");
			field4.DefaultFocusable = true;
			field4.DefaultAutoSize = true;
			field4.AnchoringBehavior.MinimumHeightInLines = 1;
			field4.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field4.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field4);
			
			DslDiagrams::TextField field5 = new DslDiagrams::TextField("DescriptionDecorator");
			field5.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("PropertyShapeDescriptionDecoratorDefaultText");
			field5.DefaultFocusable = true;
			field5.DefaultAutoSize = true;
			field5.AnchoringBehavior.MinimumHeightInLines = 1;
			field5.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field5.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field5);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "OrderDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "TypeDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerBottomCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NamespaceDecorator");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ShapeDecorator(field4, DslDiagrams::ShapeDecoratorPosition.InnerBottomLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator4);
				
			DslDiagrams::ShapeField field5 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "DescriptionDecorator");
			DslDiagrams::Decorator decorator5 = new DslDiagrams::ShapeDecorator(field5, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator5);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// PropertyShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xac29cfb1, 0x3c0f, 0x46f8, 0xb0, 0x7c, 0xec, 0x75, 0x23, 0x92, 0x0f, 0x20);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PropertyShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PropertyShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// Double-derived base class for DomainClass DomainCommandShape
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommandShape.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommandShape.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("190e49cc-2607-4fb3-998e-4fd765067f7b")]
	public abstract partial class DomainCommandShapeBase : DslDiagrams::CompartmentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with DomainCommandShape.
		/// </summary>
		public static DslDiagrams::Decorator FindDomainCommandShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.DarkKhaki);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 10/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		private global::System.Drawing.Drawing2D.LinearGradientMode fillGradientMode = global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return this.fillGradientMode;
			}
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.DarkKhaki);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetTextColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Black);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetTextColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private global::System.Drawing.Drawing2D.LinearGradientMode GetFillGradientModeValue()
		{
			return this.fillGradientMode;
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private void SetFillGradientModeValue(global::System.Drawing.Drawing2D.LinearGradientMode newValue)
		{
			this.fillGradientMode = newValue;
			this.Invalidate();
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("CommandNameDecorator");
			field1.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("DomainCommandShapeCommandNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10");			
			shapeFields.Add(field1);
			
			DslDiagrams::ChevronButtonField field2 = new DslDiagrams::ChevronButtonField("ExpandCollapseDecorator");
			field2.DefaultSelectable = false;
			field2.DefaultFocusable = false;
			shapeFields.Add(field2);
			
			DslDiagrams::TextField field3 = new DslDiagrams::TextField("DescriptionDecorator");
			field3.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("DomainCommandShapeDescriptionDecoratorDefaultText");
			field3.DefaultFocusable = true;
			field3.DefaultAutoSize = true;
			field3.AnchoringBehavior.MinimumHeightInLines = 1;
			field3.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field3.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field3);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CommandNameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapseDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "DescriptionDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator3);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[1+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("DomainCommandShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
			}
			
			return DomainCommandShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::FourDeep.PDizzle.DomainCommand));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[1+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					////////
					// CompartmentMap.DisplaysCustomString == true
					// Please provide the following method to get the string to be
					// displayed in the compartment list: 
					//
					// static string GetDisplayPropertyFromDomainCommandForProperties(DslModeling::ModelElement element)
					////////
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::FourDeep.PDizzle.Property.NameDomainPropertyId, 
																				global::FourDeep.PDizzle.Property.DomainClassId, 
																				GetElementsFromDomainCommandForProperties,
																				null,
																				GetDisplayPropertyFromDomainCommandForProperties,	// This method needs to be provided. Please see comment-block above.
																				null);
					compartmentMappings.Add(typeof(global::FourDeep.PDizzle.DomainCommand), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromDomainCommandForProperties(DslModeling::ModelElement rootElement)
			{
				global::FourDeep.PDizzle.DomainCommand root = (global::FourDeep.PDizzle.DomainCommand)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::FourDeep.PDizzle.Property> result = root.Properties;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromDomainCommandForProperties(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromDomainCommandForProperties(result);
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainCommandShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x190e49cc, 0x2607, 0x4fb3, 0x99, 0x8e, 0x4f, 0xd7, 0x65, 0x06, 0x7f, 0x7b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DomainCommandShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0x820628c8, 0xe12d, 0x4fb3, 0x9a, 0xee, 0x4c, 0xbf, 0xf1, 0xe2, 0xdf, 0x08);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// Description for FourDeep.PDizzle.DomainCommandShape.Fill Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommandShape/FillColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommandShape/FillColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("820628c8-e12d-4fb3-9aee-4cbff1e2df08")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainCommandShape.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainCommandShapeBase, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainCommandShape.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainCommandShape.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(DomainCommandShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainCommandShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TextColor domain property code
		
		/// <summary>
		/// TextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextColorDomainPropertyId = new global::System.Guid(0xab7f694f, 0x05a7, 0x4129, 0x96, 0x40, 0xfd, 0x0f, 0x2c, 0xf9, 0xf9, 0xb9);
		
		/// <summary>
		/// Gets or sets the value of TextColor domain property.
		/// Description for FourDeep.PDizzle.DomainCommandShape.Text Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommandShape/TextColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommandShape/TextColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ab7f694f-05a7-4129-9640-fd0f2cf9f9b9")]
		public global::System.Drawing.Color TextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainCommandShape.TextColor domain property.
		/// </summary>
		internal sealed partial class TextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainCommandShapeBase, global::System.Drawing.Color>
		{
			private TextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainCommandShape.TextColor domain property value handler.
			/// </summary>
			public static readonly TextColorPropertyHandler Instance = new TextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainCommandShape.TextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(DomainCommandShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextColor because its Kind is
				// set to CustomStorage. Please provide the GetTextColorValue()
				// method on the domain class.
				return element.GetTextColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainCommandShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextColor because its Kind is
					// set to CustomStorage. Please provide the SetTextColorValue()
					// method on the domain class.
					element.SetTextColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region FillGradientMode domain property code
		
		/// <summary>
		/// FillGradientMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillGradientModeDomainPropertyId = new global::System.Guid(0x2297f848, 0x1b0e, 0x4aa3, 0xb9, 0xaa, 0xd9, 0xd6, 0x39, 0x7e, 0x6d, 0x50);
		
		/// <summary>
		/// Gets or sets the value of FillGradientMode domain property.
		/// Description for FourDeep.PDizzle.DomainCommandShape.Fill Gradient Mode
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommandShape/FillGradientMode.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommandShape/FillGradientMode.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("2297f848-1b0e-4aa3-b9aa-d9d6397e6d50")]
		public global::System.Drawing.Drawing2D.LinearGradientMode FillGradientMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillGradientModePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillGradientModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainCommandShape.FillGradientMode domain property.
		/// </summary>
		internal sealed partial class FillGradientModePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainCommandShapeBase, global::System.Drawing.Drawing2D.LinearGradientMode>
		{
			private FillGradientModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainCommandShape.FillGradientMode domain property value handler.
			/// </summary>
			public static readonly FillGradientModePropertyHandler Instance = new FillGradientModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainCommandShape.FillGradientMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillGradientModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Drawing2D.LinearGradientMode GetValue(DomainCommandShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillGradientMode because its Kind is
				// set to CustomStorage. Please provide the GetFillGradientModeValue()
				// method on the domain class.
				return element.GetFillGradientModeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainCommandShapeBase element, global::System.Drawing.Drawing2D.LinearGradientMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Drawing2D.LinearGradientMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillGradientMode because its Kind is
					// set to CustomStorage. Please provide the SetFillGradientModeValue()
					// method on the domain class.
					element.SetFillGradientModeValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass DomainCommandShape
	/// Description for FourDeep.PDizzle.DomainCommandShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class DomainCommandShape : DomainCommandShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainCommandShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainCommandShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// Double-derived base class for DomainClass DomainEventShape
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEventShape.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEventShape.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f6162fdd-1e99-42b9-9090-1f4d5af3a2ac")]
	public abstract partial class DomainEventShapeBase : DslDiagrams::CompartmentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with DomainEventShape.
		/// </summary>
		public static DslDiagrams::Decorator FindDomainEventShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.SteelBlue);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 10/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		private global::System.Drawing.Drawing2D.LinearGradientMode fillGradientMode = global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return this.fillGradientMode;
			}
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.SteelBlue);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetTextColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Black);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetTextColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private global::System.Drawing.Drawing2D.LinearGradientMode GetFillGradientModeValue()
		{
			return this.fillGradientMode;
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private void SetFillGradientModeValue(global::System.Drawing.Drawing2D.LinearGradientMode newValue)
		{
			this.fillGradientMode = newValue;
			this.Invalidate();
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("DomainEventShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10");			
			shapeFields.Add(field1);
			
			DslDiagrams::ChevronButtonField field2 = new DslDiagrams::ChevronButtonField("ExpandCollapseDecorator");
			field2.DefaultSelectable = false;
			field2.DefaultFocusable = false;
			shapeFields.Add(field2);
			
			DslDiagrams::TextField field3 = new DslDiagrams::TextField("DescriptionDecorator");
			field3.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("DomainEventShapeDescriptionDecoratorDefaultText");
			field3.DefaultFocusable = true;
			field3.DefaultAutoSize = true;
			field3.AnchoringBehavior.MinimumHeightInLines = 1;
			field3.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field3.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field3);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapseDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "DescriptionDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator3);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[1+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("DomainEventShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
			}
			
			return DomainEventShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::FourDeep.PDizzle.DomainEvent));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[1+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					////////
					// CompartmentMap.DisplaysCustomString == true
					// Please provide the following method to get the string to be
					// displayed in the compartment list: 
					//
					// static string GetDisplayPropertyFromDomainEventForProperties(DslModeling::ModelElement element)
					////////
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::FourDeep.PDizzle.Property.NameDomainPropertyId, 
																				global::FourDeep.PDizzle.Property.DomainClassId, 
																				GetElementsFromDomainEventForProperties,
																				null,
																				GetDisplayPropertyFromDomainEventForProperties,	// This method needs to be provided. Please see comment-block above.
																				null);
					compartmentMappings.Add(typeof(global::FourDeep.PDizzle.DomainEvent), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromDomainEventForProperties(DslModeling::ModelElement rootElement)
			{
				global::FourDeep.PDizzle.DomainEvent root = (global::FourDeep.PDizzle.DomainEvent)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::FourDeep.PDizzle.Property> result = root.Properties;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromDomainEventForProperties(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromDomainEventForProperties(result);
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainEventShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf6162fdd, 0x1e99, 0x42b9, 0x90, 0x90, 0x1f, 0x4d, 0x5a, 0xf3, 0xa2, 0xac);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DomainEventShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0x2b7d9d14, 0x0966, 0x4847, 0x97, 0xbd, 0x7b, 0xc3, 0xb5, 0xf0, 0x22, 0xa8);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// Description for FourDeep.PDizzle.DomainEventShape.Fill Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEventShape/FillColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEventShape/FillColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("2b7d9d14-0966-4847-97bd-7bc3b5f022a8")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEventShape.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEventShapeBase, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEventShape.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEventShape.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(DomainEventShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEventShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TextColor domain property code
		
		/// <summary>
		/// TextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextColorDomainPropertyId = new global::System.Guid(0x48db0925, 0x769c, 0x4778, 0x8b, 0x1a, 0xe1, 0xfc, 0x2d, 0x5a, 0xb1, 0xa7);
		
		/// <summary>
		/// Gets or sets the value of TextColor domain property.
		/// Description for FourDeep.PDizzle.DomainEventShape.Text Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEventShape/TextColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEventShape/TextColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("48db0925-769c-4778-8b1a-e1fc2d5ab1a7")]
		public global::System.Drawing.Color TextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEventShape.TextColor domain property.
		/// </summary>
		internal sealed partial class TextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEventShapeBase, global::System.Drawing.Color>
		{
			private TextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEventShape.TextColor domain property value handler.
			/// </summary>
			public static readonly TextColorPropertyHandler Instance = new TextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEventShape.TextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(DomainEventShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextColor because its Kind is
				// set to CustomStorage. Please provide the GetTextColorValue()
				// method on the domain class.
				return element.GetTextColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEventShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextColor because its Kind is
					// set to CustomStorage. Please provide the SetTextColorValue()
					// method on the domain class.
					element.SetTextColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region FillGradientMode domain property code
		
		/// <summary>
		/// FillGradientMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillGradientModeDomainPropertyId = new global::System.Guid(0x01ff5f19, 0x60c2, 0x4fe8, 0x8f, 0x2b, 0xba, 0x0e, 0x1b, 0x37, 0x3f, 0x6c);
		
		/// <summary>
		/// Gets or sets the value of FillGradientMode domain property.
		/// Description for FourDeep.PDizzle.DomainEventShape.Fill Gradient Mode
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEventShape/FillGradientMode.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEventShape/FillGradientMode.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("01ff5f19-60c2-4fe8-8f2b-ba0e1b373f6c")]
		public global::System.Drawing.Drawing2D.LinearGradientMode FillGradientMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillGradientModePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillGradientModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEventShape.FillGradientMode domain property.
		/// </summary>
		internal sealed partial class FillGradientModePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEventShapeBase, global::System.Drawing.Drawing2D.LinearGradientMode>
		{
			private FillGradientModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEventShape.FillGradientMode domain property value handler.
			/// </summary>
			public static readonly FillGradientModePropertyHandler Instance = new FillGradientModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEventShape.FillGradientMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillGradientModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Drawing2D.LinearGradientMode GetValue(DomainEventShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillGradientMode because its Kind is
				// set to CustomStorage. Please provide the GetFillGradientModeValue()
				// method on the domain class.
				return element.GetFillGradientModeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEventShapeBase element, global::System.Drawing.Drawing2D.LinearGradientMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Drawing2D.LinearGradientMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillGradientMode because its Kind is
					// set to CustomStorage. Please provide the SetFillGradientModeValue()
					// method on the domain class.
					element.SetFillGradientModeValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass DomainEventShape
	/// Description for FourDeep.PDizzle.DomainEventShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class DomainEventShape : DomainEventShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEventShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEventShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// Double-derived base class for DomainClass EntityShape
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.EntityShape.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.EntityShape.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("40ba68af-d423-4e01-b43a-0acf142b11dc")]
	public abstract partial class EntityShapeBase : DslDiagrams::CompartmentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with EntityShape.
		/// </summary>
		public static DslDiagrams::Decorator FindEntityShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Thistle);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 10/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		private global::System.Drawing.Drawing2D.LinearGradientMode fillGradientMode = global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return this.fillGradientMode;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Thistle);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetTextColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Black);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetTextColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private global::System.Drawing.Drawing2D.LinearGradientMode GetFillGradientModeValue()
		{
			return this.fillGradientMode;
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private void SetFillGradientModeValue(global::System.Drawing.Drawing2D.LinearGradientMode newValue)
		{
			this.fillGradientMode = newValue;
			this.Invalidate();
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("EntityShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10");			
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("DescriptionDecorator");
			field2.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("EntityShapeDescriptionDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field2);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "DescriptionDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[1+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("EntityShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
			}
			
			return EntityShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::FourDeep.PDizzle.Entity));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[1+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					////////
					// CompartmentMap.DisplaysCustomString == true
					// Please provide the following method to get the string to be
					// displayed in the compartment list: 
					//
					// static string GetDisplayPropertyFromEntityForProperties(DslModeling::ModelElement element)
					////////
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::FourDeep.PDizzle.Property.NameDomainPropertyId, 
																				global::FourDeep.PDizzle.Property.DomainClassId, 
																				GetElementsFromEntityForProperties,
																				null,
																				GetDisplayPropertyFromEntityForProperties,	// This method needs to be provided. Please see comment-block above.
																				null);
					compartmentMappings.Add(typeof(global::FourDeep.PDizzle.Entity), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromEntityForProperties(DslModeling::ModelElement rootElement)
			{
				global::FourDeep.PDizzle.Entity root = (global::FourDeep.PDizzle.Entity)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::FourDeep.PDizzle.Property> result = root.Properties;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromEntityForProperties(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromEntityForProperties(result);
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x40ba68af, 0xd423, 0x4e01, 0xb4, 0x3a, 0x0a, 0xcf, 0x14, 0x2b, 0x11, 0xdc);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected EntityShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0xa16acb98, 0xa7f3, 0x4aa9, 0xb5, 0x57, 0xf1, 0x5e, 0xa7, 0x4b, 0x2a, 0xfe);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// Description for FourDeep.PDizzle.EntityShape.Fill Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.EntityShape/FillColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.EntityShape/FillColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("a16acb98-a7f3-4aa9-b557-f15ea74b2afe")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityShape.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityShapeBase, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityShape.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityShape.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(EntityShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region FillGradientMode domain property code
		
		/// <summary>
		/// FillGradientMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillGradientModeDomainPropertyId = new global::System.Guid(0x6264de99, 0x03e1, 0x4c58, 0x94, 0xf5, 0x71, 0xbc, 0xd9, 0xdb, 0x9d, 0x6e);
		
		/// <summary>
		/// Gets or sets the value of FillGradientMode domain property.
		/// Description for FourDeep.PDizzle.EntityShape.Fill Gradient Mode
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.EntityShape/FillGradientMode.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.EntityShape/FillGradientMode.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("6264de99-03e1-4c58-94f5-71bcd9db9d6e")]
		public global::System.Drawing.Drawing2D.LinearGradientMode FillGradientMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillGradientModePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillGradientModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityShape.FillGradientMode domain property.
		/// </summary>
		internal sealed partial class FillGradientModePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityShapeBase, global::System.Drawing.Drawing2D.LinearGradientMode>
		{
			private FillGradientModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityShape.FillGradientMode domain property value handler.
			/// </summary>
			public static readonly FillGradientModePropertyHandler Instance = new FillGradientModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityShape.FillGradientMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillGradientModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Drawing2D.LinearGradientMode GetValue(EntityShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillGradientMode because its Kind is
				// set to CustomStorage. Please provide the GetFillGradientModeValue()
				// method on the domain class.
				return element.GetFillGradientModeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityShapeBase element, global::System.Drawing.Drawing2D.LinearGradientMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Drawing2D.LinearGradientMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillGradientMode because its Kind is
					// set to CustomStorage. Please provide the SetFillGradientModeValue()
					// method on the domain class.
					element.SetFillGradientModeValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TextColor domain property code
		
		/// <summary>
		/// TextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextColorDomainPropertyId = new global::System.Guid(0x01a8fd6d, 0xb5a8, 0x4314, 0xb4, 0x42, 0x52, 0xa7, 0x23, 0x1d, 0xdd, 0x95);
		
		/// <summary>
		/// Gets or sets the value of TextColor domain property.
		/// Description for FourDeep.PDizzle.EntityShape.Text Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.EntityShape/TextColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.EntityShape/TextColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("01a8fd6d-b5a8-4314-b442-52a7231ddd95")]
		public global::System.Drawing.Color TextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityShape.TextColor domain property.
		/// </summary>
		internal sealed partial class TextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityShapeBase, global::System.Drawing.Color>
		{
			private TextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityShape.TextColor domain property value handler.
			/// </summary>
			public static readonly TextColorPropertyHandler Instance = new TextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityShape.TextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(EntityShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextColor because its Kind is
				// set to CustomStorage. Please provide the GetTextColorValue()
				// method on the domain class.
				return element.GetTextColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextColor because its Kind is
					// set to CustomStorage. Please provide the SetTextColorValue()
					// method on the domain class.
					element.SetTextColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass EntityShape
	/// Description for FourDeep.PDizzle.EntityShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class EntityShape : EntityShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// Double-derived base class for DomainClass ViewShape
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewShape.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewShape.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d63e8334-b13f-4b2a-87b1-847b42c6d145")]
	public abstract partial class ViewShapeBase : DslDiagrams::CompartmentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ViewShape.
		/// </summary>
		public static DslDiagrams::Decorator FindViewShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Orange);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 10/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		private global::System.Drawing.Drawing2D.LinearGradientMode fillGradientMode = global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return this.fillGradientMode;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Orange);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetTextColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Black);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetTextColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private global::System.Drawing.Drawing2D.LinearGradientMode GetFillGradientModeValue()
		{
			return this.fillGradientMode;
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private void SetFillGradientModeValue(global::System.Drawing.Drawing2D.LinearGradientMode newValue)
		{
			this.fillGradientMode = newValue;
			this.Invalidate();
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("ViewShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10");			
			shapeFields.Add(field1);
			
			DslDiagrams::ChevronButtonField field2 = new DslDiagrams::ChevronButtonField("ExpandCollapseDecorator");
			field2.DefaultSelectable = false;
			field2.DefaultFocusable = false;
			shapeFields.Add(field2);
			
			DslDiagrams::TextField field3 = new DslDiagrams::TextField("DescriptionDecorator");
			field3.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("ViewShapeDescriptionDecoratorDefaultText");
			field3.DefaultFocusable = true;
			field3.DefaultAutoSize = true;
			field3.AnchoringBehavior.MinimumHeightInLines = 1;
			field3.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field3.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field3);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapseDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "DescriptionDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator3);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[2+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("ViewShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
				{
					string title = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("ViewShapeEventsTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Events", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+1] = descriptor;
				}
			}
			
			return ViewShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::FourDeep.PDizzle.View));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[2+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Events", 
																				global::FourDeep.PDizzle.DomainEvent.NameDomainPropertyId, 
																				global::FourDeep.PDizzle.DomainEvent.DomainClassId, 
																				GetElementsFromViewForEvents,
																				null,
																				null,
																				null);
					////////
					// CompartmentMap.DisplaysCustomString == true
					// Please provide the following method to get the string to be
					// displayed in the compartment list: 
					//
					// static string GetDisplayPropertyFromViewForProperties(DslModeling::ModelElement element)
					////////
					mappings[localCompartmentMappingsOffset+1] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::FourDeep.PDizzle.Property.NameDomainPropertyId, 
																				global::FourDeep.PDizzle.Property.DomainClassId, 
																				GetElementsFromViewForProperties,
																				null,
																				GetDisplayPropertyFromViewForProperties,	// This method needs to be provided. Please see comment-block above.
																				null);
					compartmentMappings.Add(typeof(global::FourDeep.PDizzle.View), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromViewForEvents(DslModeling::ModelElement rootElement)
			{
				global::FourDeep.PDizzle.View root = (global::FourDeep.PDizzle.View)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::FourDeep.PDizzle.DomainEvent> result = root.DomainEvents;
				return result;
			}
			internal static global::System.Collections.IList GetElementsFromViewForProperties(DslModeling::ModelElement rootElement)
			{
				global::FourDeep.PDizzle.View root = (global::FourDeep.PDizzle.View)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::FourDeep.PDizzle.Property> result = root.Properties;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromViewForProperties(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromViewForProperties(result);
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ViewShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd63e8334, 0xb13f, 0x4b2a, 0x87, 0xb1, 0x84, 0x7b, 0x42, 0xc6, 0xd1, 0x45);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ViewShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0x0e13d365, 0x28cf, 0x4b38, 0xbd, 0x3d, 0x7d, 0xdb, 0x0e, 0x29, 0x1b, 0xbc);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// Description for FourDeep.PDizzle.ViewShape.Fill Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewShape/FillColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewShape/FillColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("0e13d365-28cf-4b38-bd3d-7ddb0e291bbc")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewShape.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewShapeBase, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewShape.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewShape.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ViewShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TextColor domain property code
		
		/// <summary>
		/// TextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextColorDomainPropertyId = new global::System.Guid(0x07319c29, 0xa488, 0x41b4, 0x91, 0x39, 0x24, 0xb2, 0xe1, 0xbb, 0x26, 0xf6);
		
		/// <summary>
		/// Gets or sets the value of TextColor domain property.
		/// Description for FourDeep.PDizzle.ViewShape.Text Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewShape/TextColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewShape/TextColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("07319c29-a488-41b4-9139-24b2e1bb26f6")]
		public global::System.Drawing.Color TextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewShape.TextColor domain property.
		/// </summary>
		internal sealed partial class TextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewShapeBase, global::System.Drawing.Color>
		{
			private TextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewShape.TextColor domain property value handler.
			/// </summary>
			public static readonly TextColorPropertyHandler Instance = new TextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewShape.TextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ViewShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextColor because its Kind is
				// set to CustomStorage. Please provide the GetTextColorValue()
				// method on the domain class.
				return element.GetTextColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextColor because its Kind is
					// set to CustomStorage. Please provide the SetTextColorValue()
					// method on the domain class.
					element.SetTextColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region FillGradientMode domain property code
		
		/// <summary>
		/// FillGradientMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillGradientModeDomainPropertyId = new global::System.Guid(0x28416ab5, 0x6c18, 0x453c, 0x95, 0xa8, 0xc2, 0x7d, 0xb3, 0x6c, 0x59, 0x56);
		
		/// <summary>
		/// Gets or sets the value of FillGradientMode domain property.
		/// Description for FourDeep.PDizzle.ViewShape.Fill Gradient Mode
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewShape/FillGradientMode.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewShape/FillGradientMode.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("28416ab5-6c18-453c-95a8-c27db36c5956")]
		public global::System.Drawing.Drawing2D.LinearGradientMode FillGradientMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillGradientModePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillGradientModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewShape.FillGradientMode domain property.
		/// </summary>
		internal sealed partial class FillGradientModePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewShapeBase, global::System.Drawing.Drawing2D.LinearGradientMode>
		{
			private FillGradientModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewShape.FillGradientMode domain property value handler.
			/// </summary>
			public static readonly FillGradientModePropertyHandler Instance = new FillGradientModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewShape.FillGradientMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillGradientModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Drawing2D.LinearGradientMode GetValue(ViewShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillGradientMode because its Kind is
				// set to CustomStorage. Please provide the GetFillGradientModeValue()
				// method on the domain class.
				return element.GetFillGradientModeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewShapeBase element, global::System.Drawing.Drawing2D.LinearGradientMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Drawing2D.LinearGradientMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillGradientMode because its Kind is
					// set to CustomStorage. Please provide the SetFillGradientModeValue()
					// method on the domain class.
					element.SetFillGradientModeValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass ViewShape
	/// Description for FourDeep.PDizzle.ViewShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class ViewShape : ViewShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ViewShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ViewShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// Double-derived base class for DomainClass AggregateRootShape
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootShape.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootShape.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ed123a13-de73-4a70-917a-e32103279f2b")]
	public abstract partial class AggregateRootShapeBase : DslDiagrams::CompartmentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with AggregateRootShape.
		/// </summary>
		public static DslDiagrams::Decorator FindAggregateRootShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.BurlyWood);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 10/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		private global::System.Drawing.Drawing2D.LinearGradientMode fillGradientMode = global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return this.fillGradientMode;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.BurlyWood);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetTextColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Black);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetTextColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private global::System.Drawing.Drawing2D.LinearGradientMode GetFillGradientModeValue()
		{
			return this.fillGradientMode;
		}
		
		/// <summary>
		/// Custom storage for domain property FillGradientMode.
		/// </summary>
		private void SetFillGradientModeValue(global::System.Drawing.Drawing2D.LinearGradientMode newValue)
		{
			this.fillGradientMode = newValue;
			this.Invalidate();
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("AggregateRootShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold10");			
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("DescriptionDecorator");
			field2.DefaultText = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("AggregateRootShapeDescriptionDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field2);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "DescriptionDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[1+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::FourDeep.PDizzle.PDizzleDomainModel.SingletonResourceManager.GetString("AggregateRootShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
			}
			
			return AggregateRootShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::FourDeep.PDizzle.AggregateRoot));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[1+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					////////
					// CompartmentMap.DisplaysCustomString == true
					// Please provide the following method to get the string to be
					// displayed in the compartment list: 
					//
					// static string GetDisplayPropertyFromAggregateRootForProperties(DslModeling::ModelElement element)
					////////
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::FourDeep.PDizzle.Property.NameDomainPropertyId, 
																				global::FourDeep.PDizzle.Property.DomainClassId, 
																				GetElementsFromAggregateRootForProperties,
																				null,
																				GetDisplayPropertyFromAggregateRootForProperties,	// This method needs to be provided. Please see comment-block above.
																				null);
					compartmentMappings.Add(typeof(global::FourDeep.PDizzle.AggregateRoot), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromAggregateRootForProperties(DslModeling::ModelElement rootElement)
			{
				global::FourDeep.PDizzle.AggregateRoot root = (global::FourDeep.PDizzle.AggregateRoot)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::FourDeep.PDizzle.Property> result = root.Properties;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromAggregateRootForProperties(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromAggregateRootForProperties(result);
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// AggregateRootShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xed123a13, 0xde73, 0x4a70, 0x91, 0x7a, 0xe3, 0x21, 0x03, 0x27, 0x9f, 0x2b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected AggregateRootShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0x0fc801e4, 0x7f48, 0x4eff, 0x8b, 0x73, 0xb4, 0x52, 0xf4, 0x2e, 0x47, 0x7b);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// Description for FourDeep.PDizzle.AggregateRootShape.Fill Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootShape/FillColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootShape/FillColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("0fc801e4-7f48-4eff-8b73-b452f42e477b")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateRootShape.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateRootShapeBase, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateRootShape.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateRootShape.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(AggregateRootShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateRootShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TextColor domain property code
		
		/// <summary>
		/// TextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextColorDomainPropertyId = new global::System.Guid(0xf1d62534, 0x55df, 0x4af2, 0xb8, 0x9f, 0x52, 0xe9, 0xf0, 0x06, 0x1e, 0xcb);
		
		/// <summary>
		/// Gets or sets the value of TextColor domain property.
		/// Description for FourDeep.PDizzle.AggregateRootShape.Text Color
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootShape/TextColor.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootShape/TextColor.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("f1d62534-55df-4af2-b89f-52e9f0061ecb")]
		public global::System.Drawing.Color TextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateRootShape.TextColor domain property.
		/// </summary>
		internal sealed partial class TextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateRootShapeBase, global::System.Drawing.Color>
		{
			private TextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateRootShape.TextColor domain property value handler.
			/// </summary>
			public static readonly TextColorPropertyHandler Instance = new TextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateRootShape.TextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(AggregateRootShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextColor because its Kind is
				// set to CustomStorage. Please provide the GetTextColorValue()
				// method on the domain class.
				return element.GetTextColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateRootShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextColor because its Kind is
					// set to CustomStorage. Please provide the SetTextColorValue()
					// method on the domain class.
					element.SetTextColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region FillGradientMode domain property code
		
		/// <summary>
		/// FillGradientMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillGradientModeDomainPropertyId = new global::System.Guid(0x701d504c, 0x2ae0, 0x4472, 0xab, 0x44, 0x9b, 0x09, 0xf1, 0x03, 0xc0, 0x2a);
		
		/// <summary>
		/// Gets or sets the value of FillGradientMode domain property.
		/// Description for FourDeep.PDizzle.AggregateRootShape.Fill Gradient Mode
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootShape/FillGradientMode.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootShape/FillGradientMode.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("701d504c-2ae0-4472-ab44-9b09f103c02a")]
		public global::System.Drawing.Drawing2D.LinearGradientMode FillGradientMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillGradientModePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillGradientModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateRootShape.FillGradientMode domain property.
		/// </summary>
		internal sealed partial class FillGradientModePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateRootShapeBase, global::System.Drawing.Drawing2D.LinearGradientMode>
		{
			private FillGradientModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateRootShape.FillGradientMode domain property value handler.
			/// </summary>
			public static readonly FillGradientModePropertyHandler Instance = new FillGradientModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateRootShape.FillGradientMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillGradientModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Drawing2D.LinearGradientMode GetValue(AggregateRootShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillGradientMode because its Kind is
				// set to CustomStorage. Please provide the GetFillGradientModeValue()
				// method on the domain class.
				return element.GetFillGradientModeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateRootShapeBase element, global::System.Drawing.Drawing2D.LinearGradientMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Drawing2D.LinearGradientMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillGradientMode because its Kind is
					// set to CustomStorage. Please provide the SetFillGradientModeValue()
					// method on the domain class.
					element.SetFillGradientModeValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass AggregateRootShape
	/// Description for FourDeep.PDizzle.AggregateRootShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class AggregateRootShape : AggregateRootShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateRootShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateRootShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}

