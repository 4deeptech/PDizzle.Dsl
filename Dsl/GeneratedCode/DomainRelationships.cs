//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship AggregateModelHasAggregateRoot
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasAggregateRoot.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasAggregateRoot.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("eaa5e189-9f2a-4aa9-b3f7-0ab83cfd7490")]
	public partial class AggregateModelHasAggregateRoot : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateModelHasAggregateRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeaa5e189, 0x9f2a, 0x4aa9, 0xb3, 0xf7, 0x0a, 0xb8, 0x3c, 0xfd, 0x74, 0x90);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateModelHasAggregateRoot link in the same Partition as the given AggregateModel
		/// </summary>
		/// <param name="source">AggregateModel to use as the source of the relationship.</param>
		/// <param name="target">AggregateRoot to use as the target of the relationship.</param>
		public AggregateModelHasAggregateRoot(AggregateModel source, AggregateRoot target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateModelHasAggregateRoot.AggregateModelDomainRoleId, source), new DslModeling::RoleAssignment(AggregateModelHasAggregateRoot.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasAggregateRoot(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasAggregateRoot(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasAggregateRoot(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasAggregateRoot(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateModel domain role code
		
		/// <summary>
		/// AggregateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateModelDomainRoleId = new global::System.Guid(0xb2548f74, 0x19ee, 0x40c4, 0x92, 0x4b, 0x2b, 0x2e, 0xc7, 0xf8, 0xe4, 0x8a);
		
		/// <summary>
		/// DomainRole AggregateModel
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasAggregateRoot/AggregateModel.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasAggregateRoot/AggregateModel.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregateRoot", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasAggregateRoot/AggregateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b2548f74-19ee-40c4-924b-2b2ec7f8e48a")]
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateModel of a AggregateRoot
		/// <summary>
		/// Gets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateModel GetAggregateModel(AggregateRoot element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as AggregateModel;
		}
		
		/// <summary>
		/// Sets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateModel(AggregateRoot element, AggregateModel newAggregateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newAggregateModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x1b87ae1f, 0xe56d, 0x4d2d, 0xb2, 0x18, 0x53, 0x98, 0x45, 0x5f, 0x8d, 0x5b);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasAggregateRoot/Element.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasAggregateRoot/Element.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateModel", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasAggregateRoot/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1b87ae1f-e56d-4d2d-b218-5398455f8d5b")]
		public virtual AggregateRoot Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateRoot of a AggregateModel
		/// <summary>
		/// Gets AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateRoot GetAggregateRoot(AggregateModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AggregateModelDomainRoleId) as AggregateRoot;
		}
		
		/// <summary>
		/// Sets AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateRoot(AggregateModel element, AggregateRoot newElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AggregateModelDomainRoleId, newElement);
		}
		#endregion
		#region AggregateModel link accessor
		/// <summary>
		/// Get the AggregateModelHasAggregateRoot link to a AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasAggregateRoot GetLinkToAggregateRoot (global::FourDeep.PDizzle.AggregateModel aggregateModelInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot>(aggregateModelInstance, global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.AggregateModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AggregateModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the AggregateModelHasAggregateRoot link to a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasAggregateRoot GetLinkToAggregateModel (global::FourDeep.PDizzle.AggregateRoot elementInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot>(elementInstance, global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateModelHasAggregateRoot instance accessors
		
		/// <summary>
		/// Get any AggregateModelHasAggregateRoot links between a given AggregateModel and a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot> GetLinks( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.AggregateRoot target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot>(source, global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasAggregateRoot link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateModelHasAggregateRoot link between a given AggregateModeland a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasAggregateRoot GetLink( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.AggregateRoot target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasAggregateRoot>(source, global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasAggregateRoot link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship AggregateModelHasDomainCommands
	/// Description for FourDeep.PDizzle.AggregateModelHasDomainCommands
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasDomainCommands.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasDomainCommands.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f627d2c0-1e16-4ade-bd4d-aeb4620d2f19")]
	public partial class AggregateModelHasDomainCommands : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateModelHasDomainCommands domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf627d2c0, 0x1e16, 0x4ade, 0xbd, 0x4d, 0xae, 0xb4, 0x62, 0x0d, 0x2f, 0x19);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateModelHasDomainCommands link in the same Partition as the given AggregateModel
		/// </summary>
		/// <param name="source">AggregateModel to use as the source of the relationship.</param>
		/// <param name="target">DomainCommand to use as the target of the relationship.</param>
		public AggregateModelHasDomainCommands(AggregateModel source, DomainCommand target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateModelHasDomainCommands.AggregateModelDomainRoleId, source), new DslModeling::RoleAssignment(AggregateModelHasDomainCommands.DomainCommandDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasDomainCommands(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasDomainCommands(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasDomainCommands(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasDomainCommands(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateModel domain role code
		
		/// <summary>
		/// AggregateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateModelDomainRoleId = new global::System.Guid(0xb694f8c8, 0xb24d, 0x4770, 0x80, 0xe2, 0xd9, 0x54, 0xd8, 0xab, 0xe5, 0x45);
		
		/// <summary>
		/// DomainRole AggregateModel
		/// Description for FourDeep.PDizzle.AggregateModelHasDomainCommands.AggregateModel
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasDomainCommands/AggregateModel.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasDomainCommands/AggregateModel.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainCommands", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasDomainCommands/AggregateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b694f8c8-b24d-4770-80e2-d954d8abe545")]
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateModel of a DomainCommand
		/// <summary>
		/// Gets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateModel GetAggregateModel(DomainCommand element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainCommandDomainRoleId) as AggregateModel;
		}
		
		/// <summary>
		/// Sets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateModel(DomainCommand element, AggregateModel newAggregateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainCommandDomainRoleId, newAggregateModel);
		}
		#endregion
		#region DomainCommand domain role code
		
		/// <summary>
		/// DomainCommand domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainCommandDomainRoleId = new global::System.Guid(0xb27e7fdf, 0x14c3, 0x4925, 0x80, 0x6a, 0x78, 0x86, 0x4f, 0xeb, 0x63, 0xb4);
		
		/// <summary>
		/// DomainRole DomainCommand
		/// Description for FourDeep.PDizzle.AggregateModelHasDomainCommands.DomainCommand
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasDomainCommands/DomainCommand.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasDomainCommands/DomainCommand.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateModel", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasDomainCommands/DomainCommand.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b27e7fdf-14c3-4925-806a-78864feb63b4")]
		public virtual DomainCommand DomainCommand
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainCommand)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainCommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainCommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainCommands of a AggregateModel
		/// <summary>
		/// Gets a list of DomainCommands.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainCommand> GetDomainCommands(AggregateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainCommand>, DomainCommand>(element, AggregateModelDomainRoleId);
		}
		#endregion
		#region AggregateModel link accessor
		/// <summary>
		/// Get the list of AggregateModelHasDomainCommands links to a AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHasDomainCommands> GetLinksToDomainCommands ( global::FourDeep.PDizzle.AggregateModel aggregateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasDomainCommands>(aggregateModelInstance, global::FourDeep.PDizzle.AggregateModelHasDomainCommands.AggregateModelDomainRoleId);
		}
		#endregion
		#region DomainCommand link accessor
		/// <summary>
		/// Get the AggregateModelHasDomainCommands link to a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasDomainCommands GetLinkToAggregateModel (global::FourDeep.PDizzle.DomainCommand domainCommandInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasDomainCommands>(domainCommandInstance, global::FourDeep.PDizzle.AggregateModelHasDomainCommands.DomainCommandDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainCommand not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateModelHasDomainCommands instance accessors
		
		/// <summary>
		/// Get any AggregateModelHasDomainCommands links between a given AggregateModel and a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHasDomainCommands> GetLinks( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.DomainCommand target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasDomainCommands> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasDomainCommands>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasDomainCommands>(source, global::FourDeep.PDizzle.AggregateModelHasDomainCommands.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasDomainCommands link in links )
			{
				if ( target.Equals(link.DomainCommand) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateModelHasDomainCommands link between a given AggregateModeland a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasDomainCommands GetLink( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.DomainCommand target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasDomainCommands>(source, global::FourDeep.PDizzle.AggregateModelHasDomainCommands.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasDomainCommands link in links )
			{
				if ( target.Equals(link.DomainCommand) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship AggregateModelHasProperties
	/// Description for FourDeep.PDizzle.AggregateModelHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasProperties.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasProperties.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("26a477dc-35f5-494e-84e9-0ace4c97e4e2")]
	public partial class AggregateModelHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateModelHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x26a477dc, 0x35f5, 0x494e, 0x84, 0xe9, 0x0a, 0xce, 0x4c, 0x97, 0xe4, 0xe2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateModelHasProperties link in the same Partition as the given AggregateModel
		/// </summary>
		/// <param name="source">AggregateModel to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public AggregateModelHasProperties(AggregateModel source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateModelHasProperties.AggregateModelDomainRoleId, source), new DslModeling::RoleAssignment(AggregateModelHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateModel domain role code
		
		/// <summary>
		/// AggregateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateModelDomainRoleId = new global::System.Guid(0x2570a6ba, 0x7d86, 0x4170, 0xa5, 0x4a, 0x8a, 0xd6, 0x60, 0xaf, 0x92, 0x8a);
		
		/// <summary>
		/// DomainRole AggregateModel
		/// Description for FourDeep.PDizzle.AggregateModelHasProperties.AggregateModel
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasProperties/AggregateModel.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasProperties/AggregateModel.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasProperties/AggregateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2570a6ba-7d86-4170-a54a-8ad660af928a")]
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateModel of a Property
		/// <summary>
		/// Gets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateModel GetAggregateModel(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as AggregateModel;
		}
		
		/// <summary>
		/// Sets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateModel(Property element, AggregateModel newAggregateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newAggregateModel);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x7d35a42a, 0x3b69, 0x4614, 0xa8, 0x94, 0x56, 0x6c, 0x8b, 0x0c, 0xf8, 0x8e);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.PDizzle.AggregateModelHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasProperties/Property.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasProperties/Property.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateModel", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7d35a42a-3b69-4614-a894-566c8b0cf88e")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a AggregateModel
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(AggregateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, AggregateModelDomainRoleId);
		}
		#endregion
		#region AggregateModel link accessor
		/// <summary>
		/// Get the list of AggregateModelHasProperties links to a AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHasProperties> GetLinksToProperties ( global::FourDeep.PDizzle.AggregateModel aggregateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasProperties>(aggregateModelInstance, global::FourDeep.PDizzle.AggregateModelHasProperties.AggregateModelDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the AggregateModelHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasProperties GetLinkToAggregateModel (global::FourDeep.PDizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasProperties>(propertyInstance, global::FourDeep.PDizzle.AggregateModelHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateModelHasProperties instance accessors
		
		/// <summary>
		/// Get any AggregateModelHasProperties links between a given AggregateModel and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHasProperties> GetLinks( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasProperties>(source, global::FourDeep.PDizzle.AggregateModelHasProperties.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateModelHasProperties link between a given AggregateModeland a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasProperties GetLink( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasProperties>(source, global::FourDeep.PDizzle.AggregateModelHasProperties.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship AggregateModelHasViews
	/// Description for FourDeep.PDizzle.AggregateModelHasViews
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasViews.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasViews.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("146a59f6-6a1d-4630-99f0-8d2a26a711d2")]
	public partial class AggregateModelHasViews : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateModelHasViews domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x146a59f6, 0x6a1d, 0x4630, 0x99, 0xf0, 0x8d, 0x2a, 0x26, 0xa7, 0x11, 0xd2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateModelHasViews link in the same Partition as the given AggregateModel
		/// </summary>
		/// <param name="source">AggregateModel to use as the source of the relationship.</param>
		/// <param name="target">View to use as the target of the relationship.</param>
		public AggregateModelHasViews(AggregateModel source, View target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateModelHasViews.AggregateModelDomainRoleId, source), new DslModeling::RoleAssignment(AggregateModelHasViews.ViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasViews(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasViews(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasViews(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasViews(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateModel domain role code
		
		/// <summary>
		/// AggregateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateModelDomainRoleId = new global::System.Guid(0x7c9f2b8f, 0xfdb7, 0x47ef, 0x8d, 0x92, 0x5a, 0x16, 0x96, 0x7a, 0x71, 0xbb);
		
		/// <summary>
		/// DomainRole AggregateModel
		/// Description for FourDeep.PDizzle.AggregateModelHasViews.AggregateModel
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasViews/AggregateModel.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasViews/AggregateModel.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Views", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasViews/AggregateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7c9f2b8f-fdb7-47ef-8d92-5a16967a71bb")]
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateModel of a View
		/// <summary>
		/// Gets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateModel GetAggregateModel(View element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewDomainRoleId) as AggregateModel;
		}
		
		/// <summary>
		/// Sets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateModel(View element, AggregateModel newAggregateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewDomainRoleId, newAggregateModel);
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x9646f7f2, 0x6164, 0x4b6e, 0xa0, 0x5e, 0x82, 0x70, 0x36, 0xb3, 0x92, 0x23);
		
		/// <summary>
		/// DomainRole View
		/// Description for FourDeep.PDizzle.AggregateModelHasViews.View
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasViews/View.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasViews/View.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateModel", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasViews/View.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9646f7f2-6164-4b6e-a05e-827036b39223")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Views of a AggregateModel
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<View> GetViews(AggregateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(element, AggregateModelDomainRoleId);
		}
		#endregion
		#region AggregateModel link accessor
		/// <summary>
		/// Get the list of AggregateModelHasViews links to a AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHasViews> GetLinksToViews ( global::FourDeep.PDizzle.AggregateModel aggregateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasViews>(aggregateModelInstance, global::FourDeep.PDizzle.AggregateModelHasViews.AggregateModelDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the AggregateModelHasViews link to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasViews GetLinkToAggregateModel (global::FourDeep.PDizzle.View viewInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasViews>(viewInstance, global::FourDeep.PDizzle.AggregateModelHasViews.ViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of View not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateModelHasViews instance accessors
		
		/// <summary>
		/// Get any AggregateModelHasViews links between a given AggregateModel and a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHasViews> GetLinks( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.View target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasViews> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasViews>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasViews>(source, global::FourDeep.PDizzle.AggregateModelHasViews.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateModelHasViews link between a given AggregateModeland a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasViews GetLink( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.View target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasViews>(source, global::FourDeep.PDizzle.AggregateModelHasViews.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship AggregateModelHandlesDomainEvents
	/// Description for FourDeep.PDizzle.AggregateModelHandlesDomainEvents
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHandlesDomainEvents.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHandlesDomainEvents.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("be3aad73-66eb-43ed-8ffa-3ef69caef54f")]
	public partial class AggregateModelHandlesDomainEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateModelHandlesDomainEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbe3aad73, 0x66eb, 0x43ed, 0x8f, 0xfa, 0x3e, 0xf6, 0x9c, 0xae, 0xf5, 0x4f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateModelHandlesDomainEvents link in the same Partition as the given AggregateModel
		/// </summary>
		/// <param name="source">AggregateModel to use as the source of the relationship.</param>
		/// <param name="target">DomainEvent to use as the target of the relationship.</param>
		public AggregateModelHandlesDomainEvents(AggregateModel source, DomainEvent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateModelHandlesDomainEvents.AggregateModelDomainRoleId, source), new DslModeling::RoleAssignment(AggregateModelHandlesDomainEvents.DomainEventDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHandlesDomainEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHandlesDomainEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHandlesDomainEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHandlesDomainEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateModel domain role code
		
		/// <summary>
		/// AggregateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateModelDomainRoleId = new global::System.Guid(0x9c2c53c2, 0xbe14, 0x4d6c, 0x95, 0x3d, 0x14, 0xc7, 0xb8, 0x7b, 0x71, 0xbf);
		
		/// <summary>
		/// DomainRole AggregateModel
		/// Description for
		/// FourDeep.PDizzle.AggregateModelHandlesDomainEvents.AggregateModel
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHandlesDomainEvents/AggregateModel.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHandlesDomainEvents/AggregateModel.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEvented", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHandlesDomainEvents/AggregateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9c2c53c2-be14-4d6c-953d-14c7b87b71bf")]
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateModel of a DomainEvent
		/// <summary>
		/// Gets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateModel GetAggregateModel(DomainEvent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainEventDomainRoleId) as AggregateModel;
		}
		
		/// <summary>
		/// Sets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateModel(DomainEvent element, AggregateModel newAggregateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainEventDomainRoleId, newAggregateModel);
		}
		#endregion
		#region DomainEvent domain role code
		
		/// <summary>
		/// DomainEvent domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEventDomainRoleId = new global::System.Guid(0x83e86e75, 0x6be8, 0x42e0, 0xbd, 0x00, 0xe1, 0xeb, 0x1f, 0xca, 0x56, 0x3e);
		
		/// <summary>
		/// DomainRole DomainEvent
		/// Description for FourDeep.PDizzle.AggregateModelHandlesDomainEvents.DomainEvent
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHandlesDomainEvents/DomainEvent.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHandlesDomainEvents/DomainEvent.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateModel", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHandlesDomainEvents/DomainEvent.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("83e86e75-6be8-42e0-bd00-e1eb1fca563e")]
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEvent)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEvented of a AggregateModel
		/// <summary>
		/// Gets a list of DomainEvented.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEvent> GetDomainEvented(AggregateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(element, AggregateModelDomainRoleId);
		}
		#endregion
		#region AggregateModel link accessor
		/// <summary>
		/// Get the list of AggregateModelHandlesDomainEvents links to a AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents> GetLinksToDomainEvented ( global::FourDeep.PDizzle.AggregateModel aggregateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents>(aggregateModelInstance, global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.AggregateModelDomainRoleId);
		}
		#endregion
		#region DomainEvent link accessor
		/// <summary>
		/// Get the AggregateModelHandlesDomainEvents link to a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents GetLinkToAggregateModel (global::FourDeep.PDizzle.DomainEvent domainEventInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents>(domainEventInstance, global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.DomainEventDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainEvent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateModelHandlesDomainEvents instance accessors
		
		/// <summary>
		/// Get any AggregateModelHandlesDomainEvents links between a given AggregateModel and a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents> GetLinks( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.DomainEvent target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents>(source, global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateModelHandlesDomainEvents link between a given AggregateModeland a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents GetLink( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.DomainEvent target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents>(source, global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship AggregateModelHasEntities
	/// Description for FourDeep.PDizzle.AggregateModelHasEntities
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasEntities.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasEntities.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ebdf0af1-7e93-4e9b-a085-bdf485594fc4")]
	public partial class AggregateModelHasEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateModelHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xebdf0af1, 0x7e93, 0x4e9b, 0xa0, 0x85, 0xbd, 0xf4, 0x85, 0x59, 0x4f, 0xc4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateModelHasEntities link in the same Partition as the given AggregateModel
		/// </summary>
		/// <param name="source">AggregateModel to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public AggregateModelHasEntities(AggregateModel source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateModelHasEntities.AggregateModelDomainRoleId, source), new DslModeling::RoleAssignment(AggregateModelHasEntities.EntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateModelHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateModelHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateModel domain role code
		
		/// <summary>
		/// AggregateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateModelDomainRoleId = new global::System.Guid(0x8cea9060, 0xac1a, 0x4889, 0xac, 0xb0, 0x79, 0x1d, 0xbb, 0x83, 0x9a, 0x69);
		
		/// <summary>
		/// DomainRole AggregateModel
		/// Description for FourDeep.PDizzle.AggregateModelHasEntities.AggregateModel
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasEntities/AggregateModel.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasEntities/AggregateModel.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Entities", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasEntities/AggregateModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8cea9060-ac1a-4889-acb0-791dbb839a69")]
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateModel of a Entity
		/// <summary>
		/// Gets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateModel GetAggregateModel(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityDomainRoleId) as AggregateModel;
		}
		
		/// <summary>
		/// Sets AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateModel(Entity element, AggregateModel newAggregateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityDomainRoleId, newAggregateModel);
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xf424b12c, 0xd3a7, 0x4b29, 0xaf, 0xa3, 0xe8, 0x94, 0x53, 0x14, 0x12, 0x37);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for FourDeep.PDizzle.AggregateModelHasEntities.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModelHasEntities/Entity.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModelHasEntities/Entity.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateModel", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateModelHasEntities/Entity.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f424b12c-d3a7-4b29-afa3-e89453141237")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entities of a AggregateModel
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntities(AggregateModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(element, AggregateModelDomainRoleId);
		}
		#endregion
		#region AggregateModel link accessor
		/// <summary>
		/// Get the list of AggregateModelHasEntities links to a AggregateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHasEntities> GetLinksToEntities ( global::FourDeep.PDizzle.AggregateModel aggregateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasEntities>(aggregateModelInstance, global::FourDeep.PDizzle.AggregateModelHasEntities.AggregateModelDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the AggregateModelHasEntities link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasEntities GetLinkToAggregateModel (global::FourDeep.PDizzle.Entity entityInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasEntities>(entityInstance, global::FourDeep.PDizzle.AggregateModelHasEntities.EntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Entity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateModelHasEntities instance accessors
		
		/// <summary>
		/// Get any AggregateModelHasEntities links between a given AggregateModel and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateModelHasEntities> GetLinks( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.Entity target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasEntities> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateModelHasEntities>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasEntities>(source, global::FourDeep.PDizzle.AggregateModelHasEntities.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateModelHasEntities link between a given AggregateModeland a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateModelHasEntities GetLink( global::FourDeep.PDizzle.AggregateModel source, global::FourDeep.PDizzle.Entity target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateModelHasEntities>(source, global::FourDeep.PDizzle.AggregateModelHasEntities.AggregateModelDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship DomainCommandHasProperties
	/// Description for FourDeep.PDizzle.DomainCommandHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommandHasProperties.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommandHasProperties.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e804c078-c887-4e18-932a-b1b67cd2b0b2")]
	public partial class DomainCommandHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainCommandHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe804c078, 0xc887, 0x4e18, 0x93, 0x2a, 0xb1, 0xb6, 0x7c, 0xd2, 0xb0, 0xb2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainCommandHasProperties link in the same Partition as the given DomainCommand
		/// </summary>
		/// <param name="source">DomainCommand to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public DomainCommandHasProperties(DomainCommand source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainCommandHasProperties.DomainCommandDomainRoleId, source), new DslModeling::RoleAssignment(DomainCommandHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainCommandHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainCommandHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainCommandHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainCommandHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainCommand domain role code
		
		/// <summary>
		/// DomainCommand domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainCommandDomainRoleId = new global::System.Guid(0x78c9bf1c, 0x7145, 0x4764, 0x84, 0x54, 0x49, 0x49, 0x55, 0x53, 0x25, 0x24);
		
		/// <summary>
		/// DomainRole DomainCommand
		/// Description for FourDeep.PDizzle.DomainCommandHasProperties.DomainCommand
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommandHasProperties/DomainCommand.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommandHasProperties/DomainCommand.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.PDizzle.DomainCommandHasProperties/DomainCommand.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("78c9bf1c-7145-4764-8454-494955532524")]
		public virtual DomainCommand DomainCommand
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainCommand)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainCommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainCommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainCommand of a Property
		/// <summary>
		/// Gets DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainCommand GetDomainCommand(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as DomainCommand;
		}
		
		/// <summary>
		/// Sets DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainCommand(Property element, DomainCommand newDomainCommand)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newDomainCommand);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x78ce9b51, 0x73cb, 0x4e8a, 0xb7, 0x48, 0x5e, 0x5a, 0x87, 0x56, 0xa0, 0xdd);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.PDizzle.DomainCommandHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommandHasProperties/Property.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommandHasProperties/Property.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainCommand", PropertyDisplayNameKey="FourDeep.PDizzle.DomainCommandHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("78ce9b51-73cb-4e8a-b748-5e5a8756a0dd")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a DomainCommand
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(DomainCommand element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, DomainCommandDomainRoleId);
		}
		#endregion
		#region DomainCommand link accessor
		/// <summary>
		/// Get the list of DomainCommandHasProperties links to a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.DomainCommandHasProperties> GetLinksToProperties ( global::FourDeep.PDizzle.DomainCommand domainCommandInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.DomainCommandHasProperties>(domainCommandInstance, global::FourDeep.PDizzle.DomainCommandHasProperties.DomainCommandDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the DomainCommandHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.DomainCommandHasProperties GetLinkToDomainCommand (global::FourDeep.PDizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.DomainCommandHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.DomainCommandHasProperties>(propertyInstance, global::FourDeep.PDizzle.DomainCommandHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainCommandHasProperties instance accessors
		
		/// <summary>
		/// Get any DomainCommandHasProperties links between a given DomainCommand and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.DomainCommandHasProperties> GetLinks( global::FourDeep.PDizzle.DomainCommand source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.DomainCommandHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.DomainCommandHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.DomainCommandHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.DomainCommandHasProperties>(source, global::FourDeep.PDizzle.DomainCommandHasProperties.DomainCommandDomainRoleId);
			foreach ( global::FourDeep.PDizzle.DomainCommandHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainCommandHasProperties link between a given DomainCommandand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.DomainCommandHasProperties GetLink( global::FourDeep.PDizzle.DomainCommand source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.DomainCommandHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.DomainCommandHasProperties>(source, global::FourDeep.PDizzle.DomainCommandHasProperties.DomainCommandDomainRoleId);
			foreach ( global::FourDeep.PDizzle.DomainCommandHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship ViewHasProperties
	/// Description for FourDeep.PDizzle.ViewHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewHasProperties.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewHasProperties.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("82cce89e-4ccf-440a-aee6-b146e0f88cb3")]
	public partial class ViewHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x82cce89e, 0x4ccf, 0x440a, 0xae, 0xe6, 0xb1, 0x46, 0xe0, 0xf8, 0x8c, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasProperties link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public ViewHasProperties(View source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasProperties.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x1ee93287, 0x841a, 0x413b, 0xb5, 0x54, 0x5e, 0x95, 0x14, 0x69, 0x27, 0xc7);
		
		/// <summary>
		/// DomainRole View
		/// Description for FourDeep.PDizzle.ViewHasProperties.View
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewHasProperties/View.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewHasProperties/View.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.PDizzle.ViewHasProperties/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1ee93287-841a-413b-b554-5e95146927c7")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a Property
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(Property element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newView);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0xdadf4055, 0xf364, 0x40c6, 0xa3, 0xd3, 0x53, 0x55, 0xde, 0xe8, 0xbb, 0x57);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.PDizzle.ViewHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewHasProperties/Property.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewHasProperties/Property.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="FourDeep.PDizzle.ViewHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("dadf4055-f364-40c6-a3d3-5355dee8bb57")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a View
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewHasProperties links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.ViewHasProperties> GetLinksToProperties ( global::FourDeep.PDizzle.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.ViewHasProperties>(viewInstance, global::FourDeep.PDizzle.ViewHasProperties.ViewDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the ViewHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.ViewHasProperties GetLinkToView (global::FourDeep.PDizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.ViewHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.ViewHasProperties>(propertyInstance, global::FourDeep.PDizzle.ViewHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasProperties instance accessors
		
		/// <summary>
		/// Get any ViewHasProperties links between a given View and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.ViewHasProperties> GetLinks( global::FourDeep.PDizzle.View source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.ViewHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.ViewHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.ViewHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.ViewHasProperties>(source, global::FourDeep.PDizzle.ViewHasProperties.ViewDomainRoleId);
			foreach ( global::FourDeep.PDizzle.ViewHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasProperties link between a given Viewand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.ViewHasProperties GetLink( global::FourDeep.PDizzle.View source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.ViewHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.ViewHasProperties>(source, global::FourDeep.PDizzle.ViewHasProperties.ViewDomainRoleId);
			foreach ( global::FourDeep.PDizzle.ViewHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship ViewHandlesDomainEvents
	/// Description for FourDeep.PDizzle.ViewHandlesDomainEvents
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewHandlesDomainEvents.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewHandlesDomainEvents.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("af3775fd-c8a2-4c48-987b-d04f43dc2214")]
	public partial class ViewHandlesDomainEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHandlesDomainEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaf3775fd, 0xc8a2, 0x4c48, 0x98, 0x7b, 0xd0, 0x4f, 0x43, 0xdc, 0x22, 0x14);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHandlesDomainEvents link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">DomainEvent to use as the target of the relationship.</param>
		public ViewHandlesDomainEvents(View source, DomainEvent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHandlesDomainEvents.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHandlesDomainEvents.DomainEventDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHandlesDomainEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHandlesDomainEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHandlesDomainEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHandlesDomainEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x0027c79a, 0xc5ea, 0x4d8c, 0xb5, 0x88, 0xf2, 0x2a, 0x98, 0x90, 0xb8, 0xfa);
		
		/// <summary>
		/// DomainRole View
		/// Description for FourDeep.PDizzle.ViewHandlesDomainEvents.View
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewHandlesDomainEvents/View.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewHandlesDomainEvents/View.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEvents", PropertyDisplayNameKey="FourDeep.PDizzle.ViewHandlesDomainEvents/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0027c79a-c5ea-4d8c-b588-f22a9890b8fa")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a DomainEvent
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(DomainEvent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainEventDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(DomainEvent element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainEventDomainRoleId, newView);
		}
		#endregion
		#region DomainEvent domain role code
		
		/// <summary>
		/// DomainEvent domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEventDomainRoleId = new global::System.Guid(0x5cdab9e6, 0x4a9e, 0x462c, 0xb2, 0x82, 0xd4, 0xf0, 0x4a, 0xf0, 0xea, 0xcc);
		
		/// <summary>
		/// DomainRole DomainEvent
		/// Description for FourDeep.PDizzle.ViewHandlesDomainEvents.DomainEvent
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.ViewHandlesDomainEvents/DomainEvent.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.ViewHandlesDomainEvents/DomainEvent.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="FourDeep.PDizzle.ViewHandlesDomainEvents/DomainEvent.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5cdab9e6-4a9e-462c-b282-d4f04af0eacc")]
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEvent)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEvents of a View
		/// <summary>
		/// Gets a list of DomainEvents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEvent> GetDomainEvents(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewHandlesDomainEvents links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.ViewHandlesDomainEvents> GetLinksToDomainEvents ( global::FourDeep.PDizzle.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.ViewHandlesDomainEvents>(viewInstance, global::FourDeep.PDizzle.ViewHandlesDomainEvents.ViewDomainRoleId);
		}
		#endregion
		#region DomainEvent link accessor
		/// <summary>
		/// Get the ViewHandlesDomainEvents link to a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.ViewHandlesDomainEvents GetLinkToView (global::FourDeep.PDizzle.DomainEvent domainEventInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.ViewHandlesDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.ViewHandlesDomainEvents>(domainEventInstance, global::FourDeep.PDizzle.ViewHandlesDomainEvents.DomainEventDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainEvent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHandlesDomainEvents instance accessors
		
		/// <summary>
		/// Get any ViewHandlesDomainEvents links between a given View and a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.ViewHandlesDomainEvents> GetLinks( global::FourDeep.PDizzle.View source, global::FourDeep.PDizzle.DomainEvent target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.ViewHandlesDomainEvents> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.ViewHandlesDomainEvents>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.ViewHandlesDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.ViewHandlesDomainEvents>(source, global::FourDeep.PDizzle.ViewHandlesDomainEvents.ViewDomainRoleId);
			foreach ( global::FourDeep.PDizzle.ViewHandlesDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHandlesDomainEvents link between a given Viewand a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.ViewHandlesDomainEvents GetLink( global::FourDeep.PDizzle.View source, global::FourDeep.PDizzle.DomainEvent target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.ViewHandlesDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.ViewHandlesDomainEvents>(source, global::FourDeep.PDizzle.ViewHandlesDomainEvents.ViewDomainRoleId);
			foreach ( global::FourDeep.PDizzle.ViewHandlesDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship DomainEventHasProperties
	/// Description for FourDeep.PDizzle.DomainEventHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEventHasProperties.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEventHasProperties.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("62ca0f4c-5524-4d3d-86e5-9a7b3a3123b9")]
	public partial class DomainEventHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DomainEventHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x62ca0f4c, 0x5524, 0x4d3d, 0x86, 0xe5, 0x9a, 0x7b, 0x3a, 0x31, 0x23, 0xb9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DomainEventHasProperties link in the same Partition as the given DomainEvent
		/// </summary>
		/// <param name="source">DomainEvent to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public DomainEventHasProperties(DomainEvent source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DomainEventHasProperties.DomainEventDomainRoleId, source), new DslModeling::RoleAssignment(DomainEventHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEventHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEventHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DomainEventHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DomainEventHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DomainEvent domain role code
		
		/// <summary>
		/// DomainEvent domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEventDomainRoleId = new global::System.Guid(0x76d5a3ab, 0xec48, 0x41e6, 0xa4, 0xff, 0x7b, 0x2d, 0x70, 0xcf, 0xe1, 0xa0);
		
		/// <summary>
		/// DomainRole DomainEvent
		/// Description for FourDeep.PDizzle.DomainEventHasProperties.DomainEvent
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEventHasProperties/DomainEvent.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEventHasProperties/DomainEvent.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.PDizzle.DomainEventHasProperties/DomainEvent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("76d5a3ab-ec48-41e6-a4ff-7b2d70cfe1a0")]
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEvent)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEvent of a Property
		/// <summary>
		/// Gets DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DomainEvent GetDomainEvent(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as DomainEvent;
		}
		
		/// <summary>
		/// Sets DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDomainEvent(Property element, DomainEvent newDomainEvent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newDomainEvent);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x3672caff, 0xcd8b, 0x4eef, 0x96, 0xc9, 0xd1, 0x25, 0xb5, 0xa7, 0x0d, 0xa1);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.PDizzle.DomainEventHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEventHasProperties/Property.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEventHasProperties/Property.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DomainEvent", PropertyDisplayNameKey="FourDeep.PDizzle.DomainEventHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3672caff-cd8b-4eef-96c9-d125b5a70da1")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a DomainEvent
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(DomainEvent element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, DomainEventDomainRoleId);
		}
		#endregion
		#region DomainEvent link accessor
		/// <summary>
		/// Get the list of DomainEventHasProperties links to a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.DomainEventHasProperties> GetLinksToProperties ( global::FourDeep.PDizzle.DomainEvent domainEventInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.DomainEventHasProperties>(domainEventInstance, global::FourDeep.PDizzle.DomainEventHasProperties.DomainEventDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the DomainEventHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.DomainEventHasProperties GetLinkToDomainEvent (global::FourDeep.PDizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.DomainEventHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.DomainEventHasProperties>(propertyInstance, global::FourDeep.PDizzle.DomainEventHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DomainEventHasProperties instance accessors
		
		/// <summary>
		/// Get any DomainEventHasProperties links between a given DomainEvent and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.DomainEventHasProperties> GetLinks( global::FourDeep.PDizzle.DomainEvent source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.DomainEventHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.DomainEventHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.DomainEventHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.DomainEventHasProperties>(source, global::FourDeep.PDizzle.DomainEventHasProperties.DomainEventDomainRoleId);
			foreach ( global::FourDeep.PDizzle.DomainEventHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DomainEventHasProperties link between a given DomainEventand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.DomainEventHasProperties GetLink( global::FourDeep.PDizzle.DomainEvent source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.DomainEventHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.DomainEventHasProperties>(source, global::FourDeep.PDizzle.DomainEventHasProperties.DomainEventDomainRoleId);
			foreach ( global::FourDeep.PDizzle.DomainEventHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship EntityHasProperties
	/// Description for FourDeep.PDizzle.EntityHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.EntityHasProperties.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.EntityHasProperties.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("45d81785-7491-4dde-a3c3-b8ddfc7b768e")]
	public partial class EntityHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x45d81785, 0x7491, 0x4dde, 0xa3, 0xc3, 0xb8, 0xdd, 0xfc, 0x7b, 0x76, 0x8e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasProperties link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public EntityHasProperties(Entity source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasProperties.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xeb865d6d, 0x7ef6, 0x4c45, 0x99, 0xbe, 0xd9, 0x48, 0xaf, 0x70, 0xe1, 0xaa);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for FourDeep.PDizzle.EntityHasProperties.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.EntityHasProperties/Entity.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.EntityHasProperties/Entity.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.PDizzle.EntityHasProperties/Entity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("eb865d6d-7ef6-4c45-99be-d948af70e1aa")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Property
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Property element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newEntity);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x4e19fc23, 0xab17, 0x4de4, 0xbc, 0xa0, 0xfb, 0x29, 0x76, 0xba, 0x97, 0x8e);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.PDizzle.EntityHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.EntityHasProperties/Property.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.EntityHasProperties/Property.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="FourDeep.PDizzle.EntityHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4e19fc23-ab17-4de4-bca0-fb2976ba978e")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a Entity
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(Entity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasProperties links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.EntityHasProperties> GetLinksToProperties ( global::FourDeep.PDizzle.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.EntityHasProperties>(entityInstance, global::FourDeep.PDizzle.EntityHasProperties.EntityDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the EntityHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.EntityHasProperties GetLinkToEntity (global::FourDeep.PDizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.EntityHasProperties>(propertyInstance, global::FourDeep.PDizzle.EntityHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityHasProperties links between a given Entity and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.EntityHasProperties> GetLinks( global::FourDeep.PDizzle.Entity source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.EntityHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.EntityHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.EntityHasProperties>(source, global::FourDeep.PDizzle.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::FourDeep.PDizzle.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasProperties link between a given Entityand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.EntityHasProperties GetLink( global::FourDeep.PDizzle.Entity source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.EntityHasProperties>(source, global::FourDeep.PDizzle.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::FourDeep.PDizzle.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship AggregateRootHasProperties
	/// Description for FourDeep.PDizzle.AggregateRootHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootHasProperties.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootHasProperties.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("72a252ba-ba4f-4e53-ab6f-8221b10d4bab")]
	public partial class AggregateRootHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateRootHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x72a252ba, 0xba4f, 0x4e53, 0xab, 0x6f, 0x82, 0x21, 0xb1, 0x0d, 0x4b, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateRootHasProperties link in the same Partition as the given AggregateRoot
		/// </summary>
		/// <param name="source">AggregateRoot to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public AggregateRootHasProperties(AggregateRoot source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateRootHasProperties.AggregateRootDomainRoleId, source), new DslModeling::RoleAssignment(AggregateRootHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateRoot domain role code
		
		/// <summary>
		/// AggregateRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateRootDomainRoleId = new global::System.Guid(0x4f372ad7, 0x96f5, 0x45bf, 0xa0, 0x86, 0x4d, 0x80, 0xf7, 0xce, 0x21, 0xde);
		
		/// <summary>
		/// DomainRole AggregateRoot
		/// Description for FourDeep.PDizzle.AggregateRootHasProperties.AggregateRoot
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootHasProperties/AggregateRoot.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootHasProperties/AggregateRoot.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateRootHasProperties/AggregateRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4f372ad7-96f5-45bf-a086-4d80f7ce21de")]
		public virtual AggregateRoot AggregateRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateRoot of a Property
		/// <summary>
		/// Gets AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateRoot GetAggregateRoot(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as AggregateRoot;
		}
		
		/// <summary>
		/// Sets AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateRoot(Property element, AggregateRoot newAggregateRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newAggregateRoot);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0xc2c50ed5, 0xbda5, 0x46b2, 0x8e, 0x62, 0x5a, 0x4f, 0x48, 0x16, 0x68, 0x24);
		
		/// <summary>
		/// DomainRole Property
		/// Description for FourDeep.PDizzle.AggregateRootHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootHasProperties/Property.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootHasProperties/Property.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateRoot", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateRootHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c2c50ed5-bda5-46b2-8e62-5a4f48166824")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a AggregateRoot
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(AggregateRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, AggregateRootDomainRoleId);
		}
		#endregion
		#region AggregateRoot link accessor
		/// <summary>
		/// Get the list of AggregateRootHasProperties links to a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateRootHasProperties> GetLinksToProperties ( global::FourDeep.PDizzle.AggregateRoot aggregateRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootHasProperties>(aggregateRootInstance, global::FourDeep.PDizzle.AggregateRootHasProperties.AggregateRootDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the AggregateRootHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateRootHasProperties GetLinkToAggregateRoot (global::FourDeep.PDizzle.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateRootHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootHasProperties>(propertyInstance, global::FourDeep.PDizzle.AggregateRootHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateRootHasProperties instance accessors
		
		/// <summary>
		/// Get any AggregateRootHasProperties links between a given AggregateRoot and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateRootHasProperties> GetLinks( global::FourDeep.PDizzle.AggregateRoot source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateRootHasProperties> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateRootHasProperties>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateRootHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootHasProperties>(source, global::FourDeep.PDizzle.AggregateRootHasProperties.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateRootHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateRootHasProperties link between a given AggregateRootand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateRootHasProperties GetLink( global::FourDeep.PDizzle.AggregateRoot source, global::FourDeep.PDizzle.Property target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateRootHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootHasProperties>(source, global::FourDeep.PDizzle.AggregateRootHasProperties.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateRootHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship AggregateRootReferencesDomainCommands
	/// Description for FourDeep.PDizzle.AggregateRootReferencesDomainCommands
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootReferencesDomainCommands.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootReferencesDomainCommands.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4d31c36f-94f4-4b26-85b4-5141a47895ae")]
	public partial class AggregateRootReferencesDomainCommands : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateRootReferencesDomainCommands domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d31c36f, 0x94f4, 0x4b26, 0x85, 0xb4, 0x51, 0x41, 0xa4, 0x78, 0x95, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateRootReferencesDomainCommands link in the same Partition as the given AggregateRoot
		/// </summary>
		/// <param name="source">AggregateRoot to use as the source of the relationship.</param>
		/// <param name="target">DomainCommand to use as the target of the relationship.</param>
		public AggregateRootReferencesDomainCommands(AggregateRoot source, DomainCommand target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateRootReferencesDomainCommands.AggregateRootDomainRoleId, source), new DslModeling::RoleAssignment(AggregateRootReferencesDomainCommands.DomainCommandDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootReferencesDomainCommands(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootReferencesDomainCommands(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootReferencesDomainCommands(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootReferencesDomainCommands(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateRoot domain role code
		
		/// <summary>
		/// AggregateRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateRootDomainRoleId = new global::System.Guid(0xe7992102, 0x9067, 0x4816, 0x83, 0xc6, 0x84, 0x7c, 0xfe, 0x56, 0xaf, 0x92);
		
		/// <summary>
		/// DomainRole AggregateRoot
		/// Description for
		/// FourDeep.PDizzle.AggregateRootReferencesDomainCommands.AggregateRoot
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootReferencesDomainCommands/AggregateRoot.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootReferencesDomainCommands/AggregateRoot.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainCommands", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateRootReferencesDomainCommands/AggregateRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e7992102-9067-4816-83c6-847cfe56af92")]
		public virtual AggregateRoot AggregateRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateRooted of a DomainCommand
		/// <summary>
		/// Gets a list of AggregateRooted.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AggregateRoot> GetAggregateRooted(DomainCommand element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateRoot>, AggregateRoot>(element, DomainCommandDomainRoleId);
		}
		#endregion
		#region DomainCommand domain role code
		
		/// <summary>
		/// DomainCommand domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainCommandDomainRoleId = new global::System.Guid(0x8932114b, 0x8d0e, 0x4281, 0xa0, 0xf7, 0xdc, 0xa0, 0x96, 0xbf, 0xcd, 0xe2);
		
		/// <summary>
		/// DomainRole DomainCommand
		/// Description for
		/// FourDeep.PDizzle.AggregateRootReferencesDomainCommands.DomainCommand
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootReferencesDomainCommands/DomainCommand.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootReferencesDomainCommands/DomainCommand.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateRooted", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateRootReferencesDomainCommands/DomainCommand.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8932114b-8d0e-4281-a0f7-dca096bfcde2")]
		public virtual DomainCommand DomainCommand
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainCommand)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainCommandDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainCommandDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainCommands of a AggregateRoot
		/// <summary>
		/// Gets a list of DomainCommands.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainCommand> GetDomainCommands(AggregateRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainCommand>, DomainCommand>(element, AggregateRootDomainRoleId);
		}
		#endregion
		#region AggregateRoot link accessor
		/// <summary>
		/// Get the list of AggregateRootReferencesDomainCommands links to a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands> GetLinksToDomainCommands ( global::FourDeep.PDizzle.AggregateRoot aggregateRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands>(aggregateRootInstance, global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands.AggregateRootDomainRoleId);
		}
		#endregion
		#region DomainCommand link accessor
		/// <summary>
		/// Get the list of AggregateRootReferencesDomainCommands links to a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands> GetLinksToAggregateRooted ( global::FourDeep.PDizzle.DomainCommand domainCommandInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands>(domainCommandInstance, global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands.DomainCommandDomainRoleId);
		}
		#endregion
		#region AggregateRootReferencesDomainCommands instance accessors
		
		/// <summary>
		/// Get any AggregateRootReferencesDomainCommands links between a given AggregateRoot and a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands> GetLinks( global::FourDeep.PDizzle.AggregateRoot source, global::FourDeep.PDizzle.DomainCommand target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands>(source, global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands link in links )
			{
				if ( target.Equals(link.DomainCommand) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateRootReferencesDomainCommands link between a given AggregateRootand a DomainCommand.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands GetLink( global::FourDeep.PDizzle.AggregateRoot source, global::FourDeep.PDizzle.DomainCommand target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands>(source, global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands link in links )
			{
				if ( target.Equals(link.DomainCommand) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainRelationship AggregateRootReferencesDomainEvents
	/// Description for FourDeep.PDizzle.AggregateRootReferencesDomainEvents
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootReferencesDomainEvents.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootReferencesDomainEvents.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d58de6f3-6e53-47a2-be88-3537aade1705")]
	public partial class AggregateRootReferencesDomainEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateRootReferencesDomainEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd58de6f3, 0x6e53, 0x47a2, 0xbe, 0x88, 0x35, 0x37, 0xaa, 0xde, 0x17, 0x05);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateRootReferencesDomainEvents link in the same Partition as the given AggregateRoot
		/// </summary>
		/// <param name="source">AggregateRoot to use as the source of the relationship.</param>
		/// <param name="target">DomainEvent to use as the target of the relationship.</param>
		public AggregateRootReferencesDomainEvents(AggregateRoot source, DomainEvent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateRootReferencesDomainEvents.AggregateRootDomainRoleId, source), new DslModeling::RoleAssignment(AggregateRootReferencesDomainEvents.DomainEventDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootReferencesDomainEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootReferencesDomainEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateRootReferencesDomainEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateRootReferencesDomainEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateRoot domain role code
		
		/// <summary>
		/// AggregateRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateRootDomainRoleId = new global::System.Guid(0xcd02331a, 0xda04, 0x4f39, 0x93, 0x3a, 0x0a, 0x49, 0x41, 0x0a, 0xf8, 0x22);
		
		/// <summary>
		/// DomainRole AggregateRoot
		/// Description for
		/// FourDeep.PDizzle.AggregateRootReferencesDomainEvents.AggregateRoot
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootReferencesDomainEvents/AggregateRoot.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootReferencesDomainEvents/AggregateRoot.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainEvents", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateRootReferencesDomainEvents/AggregateRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cd02331a-da04-4f39-933a-0a49410af822")]
		public virtual AggregateRoot AggregateRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateRooted of a DomainEvent
		/// <summary>
		/// Gets a list of AggregateRooted.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AggregateRoot> GetAggregateRooted(DomainEvent element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateRoot>, AggregateRoot>(element, DomainEventDomainRoleId);
		}
		#endregion
		#region DomainEvent domain role code
		
		/// <summary>
		/// DomainEvent domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainEventDomainRoleId = new global::System.Guid(0x12c4b2b1, 0x21bf, 0x46c7, 0x88, 0x68, 0xc2, 0xb4, 0xe0, 0x43, 0x9e, 0xf6);
		
		/// <summary>
		/// DomainRole DomainEvent
		/// Description for FourDeep.PDizzle.AggregateRootReferencesDomainEvents.DomainEvent
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRootReferencesDomainEvents/DomainEvent.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRootReferencesDomainEvents/DomainEvent.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateRooted", PropertyDisplayNameKey="FourDeep.PDizzle.AggregateRootReferencesDomainEvents/DomainEvent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("12c4b2b1-21bf-46c7-8868-c2b4e0439ef6")]
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainEvent)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainEventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainEventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainEvents of a AggregateRoot
		/// <summary>
		/// Gets a list of DomainEvents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DomainEvent> GetDomainEvents(AggregateRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(element, AggregateRootDomainRoleId);
		}
		#endregion
		#region AggregateRoot link accessor
		/// <summary>
		/// Get the list of AggregateRootReferencesDomainEvents links to a AggregateRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents> GetLinksToDomainEvents ( global::FourDeep.PDizzle.AggregateRoot aggregateRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents>(aggregateRootInstance, global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents.AggregateRootDomainRoleId);
		}
		#endregion
		#region DomainEvent link accessor
		/// <summary>
		/// Get the list of AggregateRootReferencesDomainEvents links to a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents> GetLinksToAggregateRooted ( global::FourDeep.PDizzle.DomainEvent domainEventInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents>(domainEventInstance, global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents.DomainEventDomainRoleId);
		}
		#endregion
		#region AggregateRootReferencesDomainEvents instance accessors
		
		/// <summary>
		/// Get any AggregateRootReferencesDomainEvents links between a given AggregateRoot and a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents> GetLinks( global::FourDeep.PDizzle.AggregateRoot source, global::FourDeep.PDizzle.DomainEvent target )
		{
			global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents> outLinks = new global::System.Collections.Generic.List<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents>();
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents>(source, global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateRootReferencesDomainEvents link between a given AggregateRootand a DomainEvent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents GetLink( global::FourDeep.PDizzle.AggregateRoot source, global::FourDeep.PDizzle.DomainEvent target )
		{
			global::System.Collections.Generic.IList<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents>(source, global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents.AggregateRootDomainRoleId);
			foreach ( global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents link in links )
			{
				if ( target.Equals(link.DomainEvent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
