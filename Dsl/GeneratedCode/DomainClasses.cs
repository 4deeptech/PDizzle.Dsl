//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainClass AggregateModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModel.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModel.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("08bec8f8-a647-427e-99aa-9672ba79a223")]
	public partial class AggregateModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AggregateModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x08bec8f8, 0xa647, 0x427e, 0x99, 0xaa, 0x96, 0x72, 0xba, 0x79, 0xa2, 0x23);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelNamespace domain property code
		
		/// <summary>
		/// ModelNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelNamespaceDomainPropertyId = new global::System.Guid(0x3a453e98, 0xd39f, 0x4393, 0x90, 0x7e, 0xc2, 0xf0, 0x36, 0x20, 0xda, 0x1a);
		
		/// <summary>
		/// Storage for ModelNamespace
		/// </summary>
		private global::System.String modelNamespacePropertyStorage = "Cqrs";
		
		/// <summary>
		/// Gets or sets the value of ModelNamespace domain property.
		/// Description for FourDeep.PDizzle.AggregateModel.Model Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateModel/ModelNamespace.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateModel/ModelNamespace.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Cqrs")]
		[DslModeling::DomainObjectId("3a453e98-d39f-4393-907e-c2f03620da1a")]
		public global::System.String ModelNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateModel.ModelNamespace domain property.
		/// </summary>
		internal sealed partial class ModelNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateModel, global::System.String>
		{
			private ModelNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateModel.ModelNamespace domain property value handler.
			/// </summary>
			public static readonly ModelNamespacePropertyHandler Instance = new ModelNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateModel.ModelNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modelNamespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateRoot.
		/// </summary>
		public virtual AggregateRoot AggregateRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.AggregateModelDomainRoleId) as AggregateRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.AggregateModelDomainRoleId, value);
			}
		}
		#endregion
		#region DomainCommands opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainCommands.
		/// Description for FourDeep.PDizzle.AggregateModelHasDomainCommands.AggregateModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainCommand> DomainCommands
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainCommand>, DomainCommand>(global::FourDeep.PDizzle.AggregateModelHasDomainCommands.AggregateModelDomainRoleId);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.PDizzle.AggregateModelHasProperties.AggregateModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.PDizzle.AggregateModelHasProperties.AggregateModelDomainRoleId);
			}
		}
		#endregion
		#region Views opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Views.
		/// Description for FourDeep.PDizzle.AggregateModelHasViews.AggregateModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<View> Views
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(global::FourDeep.PDizzle.AggregateModelHasViews.AggregateModelDomainRoleId);
			}
		}
		#endregion
		#region DomainEvented opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEvented.
		/// Description for
		/// FourDeep.PDizzle.AggregateModelHandlesDomainEvents.AggregateModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEvent> DomainEvented
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.AggregateModelDomainRoleId);
			}
		}
		#endregion
		#region Entities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Entities.
		/// Description for FourDeep.PDizzle.AggregateModelHasEntities.AggregateModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Entities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::FourDeep.PDizzle.AggregateModelHasEntities.AggregateModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.AggregateRoot.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: AggregateModelHasAggregateRoot.AggregateRoot
					if (this.AggregateRoot != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.DomainCommand.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.Property.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.View.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.DomainEvent.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.Entity.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.PDizzle.AggregateRoot sourceAggregateRoot1 = sourceElement as global::FourDeep.PDizzle.AggregateRoot;
			if (sourceAggregateRoot1 != null)
			{
				// Create link for path AggregateModelHasAggregateRoot.AggregateRoot
				this.AggregateRoot = sourceAggregateRoot1;

				return;
			}
				
			global::FourDeep.PDizzle.DomainCommand sourceDomainCommand2 = sourceElement as global::FourDeep.PDizzle.DomainCommand;
			if (sourceDomainCommand2 != null)
			{
				// Create link for path AggregateModelHasDomainCommands.DomainCommands
				this.DomainCommands.Add(sourceDomainCommand2);

				return;
			}
				
			global::FourDeep.PDizzle.Property sourceProperty3 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty3 != null)
			{
				// Create link for path AggregateModelHasProperties.Properties
				this.Properties.Add(sourceProperty3);

				return;
			}
				
			global::FourDeep.PDizzle.View sourceView4 = sourceElement as global::FourDeep.PDizzle.View;
			if (sourceView4 != null)
			{
				// Create link for path AggregateModelHasViews.Views
				this.Views.Add(sourceView4);

				return;
			}
				
			global::FourDeep.PDizzle.DomainEvent sourceDomainEvent5 = sourceElement as global::FourDeep.PDizzle.DomainEvent;
			if (sourceDomainEvent5 != null)
			{
				// Create link for path AggregateModelHandlesDomainEvents.DomainEvented
				this.DomainEvented.Add(sourceDomainEvent5);

				return;
			}
				
			global::FourDeep.PDizzle.Entity sourceEntity6 = sourceElement as global::FourDeep.PDizzle.Entity;
			if (sourceEntity6 != null)
			{
				// Create link for path AggregateModelHasEntities.Entities
				this.Entities.Add(sourceEntity6);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.PDizzle.AggregateRoot sourceAggregateRoot1 = sourceElement as global::FourDeep.PDizzle.AggregateRoot;
			if (sourceAggregateRoot1 != null)
			{
				// Delete link for path AggregateModelHasAggregateRoot.AggregateRoot
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.GetLinks((global::FourDeep.PDizzle.AggregateModel)this, sourceAggregateRoot1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.AggregateModelDomainRoleId, global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.ElementDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.PDizzle.DomainCommand sourceDomainCommand2 = sourceElement as global::FourDeep.PDizzle.DomainCommand;
			if (sourceDomainCommand2 != null)
			{
				// Delete link for path AggregateModelHasDomainCommands.DomainCommands
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.AggregateModelHasDomainCommands.GetLinks((global::FourDeep.PDizzle.AggregateModel)this, sourceDomainCommand2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.AggregateModelHasDomainCommands.AggregateModelDomainRoleId, global::FourDeep.PDizzle.AggregateModelHasDomainCommands.DomainCommandDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.PDizzle.Property sourceProperty3 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty3 != null)
			{
				// Delete link for path AggregateModelHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.AggregateModelHasProperties.GetLinks((global::FourDeep.PDizzle.AggregateModel)this, sourceProperty3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.AggregateModelHasProperties.AggregateModelDomainRoleId, global::FourDeep.PDizzle.AggregateModelHasProperties.PropertyDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.PDizzle.View sourceView4 = sourceElement as global::FourDeep.PDizzle.View;
			if (sourceView4 != null)
			{
				// Delete link for path AggregateModelHasViews.Views
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.AggregateModelHasViews.GetLinks((global::FourDeep.PDizzle.AggregateModel)this, sourceView4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.AggregateModelHasViews.AggregateModelDomainRoleId, global::FourDeep.PDizzle.AggregateModelHasViews.ViewDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.PDizzle.DomainEvent sourceDomainEvent5 = sourceElement as global::FourDeep.PDizzle.DomainEvent;
			if (sourceDomainEvent5 != null)
			{
				// Delete link for path AggregateModelHandlesDomainEvents.DomainEvented
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.GetLinks((global::FourDeep.PDizzle.AggregateModel)this, sourceDomainEvent5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.AggregateModelDomainRoleId, global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.DomainEventDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.PDizzle.Entity sourceEntity6 = sourceElement as global::FourDeep.PDizzle.Entity;
			if (sourceEntity6 != null)
			{
				// Delete link for path AggregateModelHasEntities.Entities
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.AggregateModelHasEntities.GetLinks((global::FourDeep.PDizzle.AggregateModel)this, sourceEntity6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.AggregateModelHasEntities.AggregateModelDomainRoleId, global::FourDeep.PDizzle.AggregateModelHasEntities.EntityDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainClass AggregateRoot
	/// Represents the aggregate root which defines a consistency boundary
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRoot.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRoot.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("3474db54-efe0-40f5-93f3-eabb0b41a9c8")]
	public partial class AggregateRoot : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AggregateRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3474db54, 0xefe0, 0x40f5, 0x93, 0xf3, 0xea, 0xbb, 0x0b, 0x41, 0xa9, 0xc8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9d58d1cf, 0x50d9, 0x470c, 0x91, 0x24, 0x7e, 0x6a, 0xc7, 0xad, 0x0e, 0x16);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.PDizzle.AggregateRoot.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRoot/Name.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRoot/Name.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9d58d1cf-50d9-470c-9124-7e6ac7ad0e16")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateRoot.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateRoot, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateRoot.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateRoot.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x9fce5e01, 0x54f7, 0x487b, 0xa1, 0x6f, 0xc5, 0x34, 0x6d, 0x69, 0x70, 0xcd);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.PDizzle.AggregateRoot.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.AggregateRoot/Description.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.AggregateRoot/Description.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9fce5e01-54f7-487b-a16f-c5346d6970cd")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateRoot.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateRoot, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateRoot.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateRoot.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateModel.
		/// </summary>
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.ElementDomainRoleId) as AggregateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasAggregateRoot.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.PDizzle.AggregateRootHasProperties.AggregateRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.PDizzle.AggregateRootHasProperties.AggregateRootDomainRoleId);
			}
		}
		#endregion
		#region DomainCommands opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainCommands.
		/// Description for
		/// FourDeep.PDizzle.AggregateRootReferencesDomainCommands.AggregateRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainCommand> DomainCommands
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainCommand>, DomainCommand>(global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands.AggregateRootDomainRoleId);
			}
		}
		#endregion
		#region DomainEvents opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEvents.
		/// Description for
		/// FourDeep.PDizzle.AggregateRootReferencesDomainEvents.AggregateRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEvent> DomainEvents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents.AggregateRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path AggregateRootHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path AggregateRootHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.AggregateRootHasProperties.GetLinks((global::FourDeep.PDizzle.AggregateRoot)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.AggregateRootHasProperties.AggregateRootDomainRoleId, global::FourDeep.PDizzle.AggregateRootHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainClass DomainCommand
	/// Description for FourDeep.PDizzle.DomainCommand
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommand.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommand.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("d35f5543-23a3-465d-971b-f45f7eba6e53")]
	public partial class DomainCommand : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainCommand domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd35f5543, 0x23a3, 0x465d, 0x97, 0x1b, 0xf4, 0x5f, 0x7e, 0xba, 0x6e, 0x53);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainCommand(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainCommand(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8e4d214d, 0xf3a4, 0x4da8, 0xad, 0xb5, 0x37, 0x6a, 0x21, 0x91, 0x6e, 0x34);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.PDizzle.DomainCommand.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommand/Name.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommand/Name.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("8e4d214d-f3a4-4da8-adb5-376a21916e34")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainCommand.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainCommand, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainCommand.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainCommand.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainCommand element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainCommand element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xf755037b, 0xeb78, 0x4897, 0xa4, 0x97, 0xe9, 0xc9, 0x46, 0x90, 0xc6, 0x33);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.PDizzle.DomainCommand.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommand/Description.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommand/Description.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f755037b-eb78-4897-a497-e9c94690c633")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainCommand.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainCommand, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainCommand.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainCommand.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainCommand element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainCommand element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RequiredPrivilege domain property code
		
		/// <summary>
		/// RequiredPrivilege domain property Id.
		/// </summary>
		public static readonly global::System.Guid RequiredPrivilegeDomainPropertyId = new global::System.Guid(0x46c483af, 0xeba5, 0x4055, 0x9c, 0xc7, 0xea, 0xda, 0x82, 0x74, 0x40, 0xd6);
		
		/// <summary>
		/// Storage for RequiredPrivilege
		/// </summary>
		private global::System.String requiredPrivilegePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RequiredPrivilege domain property.
		/// Description for FourDeep.PDizzle.DomainCommand.Required Privilege
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainCommand/RequiredPrivilege.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainCommand/RequiredPrivilege.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("46c483af-eba5-4055-9cc7-eada827440d6")]
		public global::System.String RequiredPrivilege
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return requiredPrivilegePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RequiredPrivilegePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainCommand.RequiredPrivilege domain property.
		/// </summary>
		internal sealed partial class RequiredPrivilegePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainCommand, global::System.String>
		{
			private RequiredPrivilegePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainCommand.RequiredPrivilege domain property value handler.
			/// </summary>
			public static readonly RequiredPrivilegePropertyHandler Instance = new RequiredPrivilegePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainCommand.RequiredPrivilege domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RequiredPrivilegeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainCommand element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.requiredPrivilegePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainCommand element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.requiredPrivilegePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateModel.
		/// Description for FourDeep.PDizzle.AggregateModelHasDomainCommands.DomainCommand
		/// </summary>
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasDomainCommands.DomainCommandDomainRoleId) as AggregateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasDomainCommands.DomainCommandDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.PDizzle.DomainCommandHasProperties.DomainCommand
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.PDizzle.DomainCommandHasProperties.DomainCommandDomainRoleId);
			}
		}
		#endregion
		#region AggregateRooted opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AggregateRooted.
		/// Description for
		/// FourDeep.PDizzle.AggregateRootReferencesDomainCommands.DomainCommand
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AggregateRoot> AggregateRooted
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateRoot>, AggregateRoot>(global::FourDeep.PDizzle.AggregateRootReferencesDomainCommands.DomainCommandDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path DomainCommandHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path DomainCommandHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.DomainCommandHasProperties.GetLinks((global::FourDeep.PDizzle.DomainCommand)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.DomainCommandHasProperties.DomainCommandDomainRoleId, global::FourDeep.PDizzle.DomainCommandHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainClass Property
	/// Description for FourDeep.PDizzle.Property
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.Property.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.Property.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("78654c4a-7675-4a61-a7c9-50cdd52aae41")]
	public partial class Property : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Property domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78654c4a, 0x7675, 0x4a61, 0xa7, 0xc9, 0x50, 0xcd, 0xd5, 0x2a, 0xae, 0x41);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Order domain property code
		
		/// <summary>
		/// Order domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderDomainPropertyId = new global::System.Guid(0x8165d072, 0x3b54, 0x48d7, 0xb5, 0x91, 0x0e, 0x0b, 0x1a, 0x67, 0x5e, 0x31);
		
		/// <summary>
		/// Storage for Order
		/// </summary>
		private global::System.Int32 orderPropertyStorage = 999;
		
		/// <summary>
		/// Gets or sets the value of Order domain property.
		/// Description for FourDeep.PDizzle.Property.Order
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.Property/Order.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.Property/Order.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(999)]
		[DslModeling::DomainObjectId("8165d072-3b54-48d7-b591-0e0b1a675e31")]
		public global::System.Int32 Order
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Order domain property.
		/// </summary>
		internal sealed partial class OrderPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.Int32>
		{
			private OrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Order domain property value handler.
			/// </summary>
			public static readonly OrderPropertyHandler Instance = new OrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Order domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc44f6025, 0x3dca, 0x48cc, 0xbb, 0x96, 0x9d, 0x38, 0x65, 0xca, 0xbd, 0x3e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.PDizzle.Property.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.Property/Name.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.Property/Name.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c44f6025-3dca-48cc-bb96-9d3865cabd3e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xb05452e2, 0x11dd, 0x47a7, 0x8d, 0x31, 0xf6, 0xac, 0x98, 0xe5, 0x0a, 0x3a);
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for FourDeep.PDizzle.Property.Type
		/// </summary>
		[System.ComponentModel.Editor(typeof(PropertyTypeNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.Property/Type.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.Property/Type.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b05452e2-11dd-47a7-8d31-f6ac98e50a3a")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Type because its Kind is
				// set to CustomStorage. Please provide the GetTypeValue()
				// method on the domain class.
				return element.GetTypeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Type because its Kind is
					// set to CustomStorage. Please provide the SetTypeValue()
					// method on the domain class.
					element.SetTypeValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x62ab7f87, 0x897c, 0x473e, 0xa7, 0xe2, 0x25, 0xbe, 0x5a, 0x47, 0x2b, 0xd7);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Description for FourDeep.PDizzle.Property.Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.Property/Namespace.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.Property/Namespace.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("62ab7f87-897c-473e-a7e2-25be5a472bd7")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x05859a50, 0x1d9a, 0x4d97, 0xaf, 0x74, 0x1b, 0x2e, 0x6e, 0x05, 0x8e, 0x7e);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.PDizzle.Property.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.Property/Description.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.Property/Description.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("05859a50-1d9a-4d97-af74-1b2e6e058e7e")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateModel.
		/// Description for FourDeep.PDizzle.AggregateModelHasProperties.Property
		/// </summary>
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasProperties.PropertyDomainRoleId) as AggregateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region DomainCommand opposite domain role accessor
		/// <summary>
		/// Gets or sets DomainCommand.
		/// Description for FourDeep.PDizzle.DomainCommandHasProperties.Property
		/// </summary>
		public virtual DomainCommand DomainCommand
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.DomainCommandHasProperties.PropertyDomainRoleId) as DomainCommand;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.DomainCommandHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// Description for FourDeep.PDizzle.ViewHasProperties.Property
		/// </summary>
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.ViewHasProperties.PropertyDomainRoleId) as View;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.ViewHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region DomainEvent opposite domain role accessor
		/// <summary>
		/// Gets or sets DomainEvent.
		/// Description for FourDeep.PDizzle.DomainEventHasProperties.Property
		/// </summary>
		public virtual DomainEvent DomainEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.DomainEventHasProperties.PropertyDomainRoleId) as DomainEvent;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.DomainEventHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// Description for FourDeep.PDizzle.EntityHasProperties.Property
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.EntityHasProperties.PropertyDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.EntityHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
		#region AggregateRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateRoot.
		/// Description for FourDeep.PDizzle.AggregateRootHasProperties.Property
		/// </summary>
		public virtual AggregateRoot AggregateRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.AggregateRootHasProperties.PropertyDomainRoleId) as AggregateRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.AggregateRootHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainClass View
	/// Description for FourDeep.PDizzle.View
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.View.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.View.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("5e39a750-0a8c-4c30-a4c3-f90bc0122643")]
	public partial class View : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// View domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5e39a750, 0x0a8c, 0x4c30, 0xa4, 0xc3, 0xf9, 0x0b, 0xc0, 0x12, 0x26, 0x43);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc6e0997a, 0xa735, 0x4217, 0xae, 0x49, 0x63, 0x1b, 0xbe, 0x2a, 0x0f, 0x49);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.PDizzle.View.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.View/Name.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.View/Name.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c6e0997a-a735-4217-ae49-631bbe2a0f49")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<View, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(View element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(View element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x77ac4950, 0x2c94, 0x49e7, 0x95, 0x65, 0x31, 0x75, 0xd6, 0x7a, 0xfb, 0x8b);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.PDizzle.View.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.View/Description.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.View/Description.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("77ac4950-2c94-49e7-9565-3175d67afb8b")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<View, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(View element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(View element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateModel.
		/// Description for FourDeep.PDizzle.AggregateModelHasViews.View
		/// </summary>
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasViews.ViewDomainRoleId) as AggregateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasViews.ViewDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.PDizzle.ViewHasProperties.View
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.PDizzle.ViewHasProperties.ViewDomainRoleId);
			}
		}
		#endregion
		#region DomainEvents opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainEvents.
		/// Description for FourDeep.PDizzle.ViewHandlesDomainEvents.View
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DomainEvent> DomainEvents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainEvent>, DomainEvent>(global::FourDeep.PDizzle.ViewHandlesDomainEvents.ViewDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.Property.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.DomainEvent.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path ViewHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
				
			global::FourDeep.PDizzle.DomainEvent sourceDomainEvent2 = sourceElement as global::FourDeep.PDizzle.DomainEvent;
			if (sourceDomainEvent2 != null)
			{
				// Create link for path ViewHandlesDomainEvents.DomainEvents
				this.DomainEvents.Add(sourceDomainEvent2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path ViewHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.ViewHasProperties.GetLinks((global::FourDeep.PDizzle.View)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.ViewHasProperties.ViewDomainRoleId, global::FourDeep.PDizzle.ViewHasProperties.PropertyDomainRoleId);
				}

				return;
			}
				
			global::FourDeep.PDizzle.DomainEvent sourceDomainEvent2 = sourceElement as global::FourDeep.PDizzle.DomainEvent;
			if (sourceDomainEvent2 != null)
			{
				// Delete link for path ViewHandlesDomainEvents.DomainEvents
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.ViewHandlesDomainEvents.GetLinks((global::FourDeep.PDizzle.View)this, sourceDomainEvent2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.ViewHandlesDomainEvents.ViewDomainRoleId, global::FourDeep.PDizzle.ViewHandlesDomainEvents.DomainEventDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainClass DomainEvent
	/// Description for FourDeep.PDizzle.DomainEvent
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEvent.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEvent.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("4d19bf3f-5132-48ab-ab1b-04bd5e97a942")]
	public partial class DomainEvent : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainEvent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d19bf3f, 0x5132, 0x48ab, 0xab, 0x1b, 0x04, 0xbd, 0x5e, 0x97, 0xa9, 0x42);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEvent(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainEvent(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x1e1de513, 0xcb26, 0x43bd, 0xb3, 0xa5, 0xec, 0xa5, 0xf6, 0x3f, 0x45, 0xca);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.PDizzle.DomainEvent.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEvent/Name.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEvent/Name.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("1e1de513-cb26-43bd-b3a5-eca5f63f45ca")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEvent.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEvent, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEvent.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEvent.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEvent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEvent element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x11c48a4d, 0x4ba0, 0x44c1, 0xa2, 0x1a, 0xc5, 0xec, 0x90, 0x3c, 0xca, 0x0d);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.PDizzle.DomainEvent.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.DomainEvent/Description.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.DomainEvent/Description.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("11c48a4d-4ba0-44c1-a21a-c5ec903cca0d")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainEvent.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainEvent, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainEvent.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainEvent.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainEvent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainEvent element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateModel.
		/// Description for FourDeep.PDizzle.AggregateModelHandlesDomainEvents.DomainEvent
		/// </summary>
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.DomainEventDomainRoleId) as AggregateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHandlesDomainEvents.DomainEventDomainRoleId, value);
			}
		}
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// Description for FourDeep.PDizzle.ViewHandlesDomainEvents.DomainEvent
		/// </summary>
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.ViewHandlesDomainEvents.DomainEventDomainRoleId) as View;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.ViewHandlesDomainEvents.DomainEventDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.PDizzle.DomainEventHasProperties.DomainEvent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.PDizzle.DomainEventHasProperties.DomainEventDomainRoleId);
			}
		}
		#endregion
		#region AggregateRooted opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AggregateRooted.
		/// Description for FourDeep.PDizzle.AggregateRootReferencesDomainEvents.DomainEvent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AggregateRoot> AggregateRooted
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateRoot>, AggregateRoot>(global::FourDeep.PDizzle.AggregateRootReferencesDomainEvents.DomainEventDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path DomainEventHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path DomainEventHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.DomainEventHasProperties.GetLinks((global::FourDeep.PDizzle.DomainEvent)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.DomainEventHasProperties.DomainEventDomainRoleId, global::FourDeep.PDizzle.DomainEventHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace FourDeep.PDizzle
{
	/// <summary>
	/// DomainClass Entity
	/// Description for FourDeep.PDizzle.Entity
	/// </summary>
	[DslDesign::DisplayNameResource("FourDeep.PDizzle.Entity.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("FourDeep.PDizzle.Entity.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::FourDeep.PDizzle.PDizzleDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("bfa2df6f-9ee9-4bcc-9af7-b54473424eef")]
	public partial class Entity : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbfa2df6f, 0x9ee9, 0x4bcc, 0x9a, 0xf7, 0xb5, 0x44, 0x73, 0x42, 0x4e, 0xef);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8e07b5ad, 0x69ad, 0x46a3, 0x92, 0x25, 0xe6, 0x1f, 0xf4, 0x94, 0x63, 0xdd);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for FourDeep.PDizzle.Entity.Name
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.Entity/Name.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.Entity/Name.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("8e07b5ad-69ad-46a3-9225-e61ff49463dd")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x511afacc, 0x5527, 0x4e1a, 0x88, 0x11, 0xd8, 0x5c, 0x9f, 0x67, 0xac, 0x57);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for FourDeep.PDizzle.Entity.Description
		/// </summary>
		[DslDesign::DisplayNameResource("FourDeep.PDizzle.Entity/Description.DisplayName", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("FourDeep.PDizzle.Entity/Description.Description", typeof(global::FourDeep.PDizzle.PDizzleDomainModel), "FourDeep.PDizzle.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("511afacc-5527-4e1a-8811-d85c9f67ac57")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateModel.
		/// Description for FourDeep.PDizzle.AggregateModelHasEntities.Entity
		/// </summary>
		public virtual AggregateModel AggregateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasEntities.EntityDomainRoleId) as AggregateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::FourDeep.PDizzle.AggregateModelHasEntities.EntityDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for FourDeep.PDizzle.EntityHasProperties.Entity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::FourDeep.PDizzle.EntityHasProperties.EntityDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::FourDeep.PDizzle.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path EntityHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::FourDeep.PDizzle.Property sourceProperty1 = sourceElement as global::FourDeep.PDizzle.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path EntityHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::FourDeep.PDizzle.EntityHasProperties.GetLinks((global::FourDeep.PDizzle.Entity)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::FourDeep.PDizzle.EntityHasProperties.EntityDomainRoleId, global::FourDeep.PDizzle.EntityHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
